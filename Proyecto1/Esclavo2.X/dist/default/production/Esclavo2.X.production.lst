

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Feb 20 19:24:56 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0013                     _SSPBUF	set	19
   288  0014                     _SSPCON	set	20
   289  000C                     _PIR1bits	set	12
   290  0006                     _PORTBbits	set	6
   291  000B                     _INTCONbits	set	11
   292  0005                     _PORTAbits	set	5
   293  0008                     _PORTD	set	8
   294  0006                     _PORTB	set	6
   295  000B                     _INTCON	set	11
   296  0063                     _SSPIF	set	99
   297  0094                     _SSPSTATbits	set	148
   298  0094                     _SSPSTAT	set	148
   299  0087                     _TRISCbits	set	135
   300  0096                     _IOCBbits	set	150
   301  0088                     _TRISD	set	136
   302  0086                     _TRISB	set	134
   303  0085                     _TRISAbits	set	133
   304  043B                     _TRISC3	set	1083
   305  043D                     _TRISC5	set	1085
   306  0463                     _SSPIE	set	1123
   307                           
   308                           	psect	cinit
   309  000F                     start_initialization:	
   310                           ; #config settings
   311                           
   312  000F                     __initialization:
   313                           
   314                           ; Clear objects allocated to COMMON
   315  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   316  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   317  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   318  0012                     end_of_initialization:	
   319                           ;End of C runtime variable initialization code
   320                           
   321  0012                     __end_of__initialization:
   322  0012  0183               	clrf	3
   323  0013  120A  118A  289C   	ljmp	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMMON
   326  0077                     __pbssCOMMON:
   327  0077                     _esclavo1:
   328  0077                     	ds	1
   329  0078                     _flag:
   330  0078                     	ds	1
   331  0079                     _count:
   332  0079                     	ds	1
   333                           
   334                           	psect	cstackCOMMON
   335  0070                     __pcstackCOMMON:
   336  0070                     ?_spiRead:
   337  0070                     ??_spiRead:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_spiWrite:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ??_spiWrite:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_setup:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_ISR:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_main:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_spiReceiveWait:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ??_spiReceiveWait:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     spiWrite@dat:	
   362                           ; 1 bytes @ 0x0
   363                           
   364                           
   365                           ; 1 bytes @ 0x0
   366  0070                     	ds	1
   367  0071                     ??_ISR:
   368                           
   369                           ; 1 bytes @ 0x1
   370  0071                     	ds	3
   371  0074                     ?_spiInit:
   372  0074                     ??_setup:	
   373                           ; 1 bytes @ 0x4
   374                           
   375  0074                     spiInit@sDataSample:	
   376                           ; 1 bytes @ 0x4
   377                           
   378                           
   379                           ; 1 bytes @ 0x4
   380  0074                     	ds	1
   381  0075                     spiInit@sClockIdle:
   382                           
   383                           ; 1 bytes @ 0x5
   384  0075                     	ds	1
   385  0076                     spiInit@sTransmitEdge:
   386                           
   387                           ; 1 bytes @ 0x6
   388  0076                     	ds	1
   389  0077                     ??_spiInit:
   390  0077                     ??_main:	
   391                           ; 1 bytes @ 0x7
   392                           
   393                           
   394                           	psect	cstackBANK0
   395  0020                     __pcstackBANK0:	
   396                           ; 1 bytes @ 0x7
   397                           
   398  0020                     spiInit@sType:
   399                           
   400                           ; 1 bytes @ 0x0
   401  0020                     	ds	1
   402                           
   403                           	psect	maintext
   404  009C                     __pmaintext:	
   405 ;;
   406 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   407 ;;
   408 ;; *************** function _main *****************
   409 ;; Defined at:
   410 ;;		line 112 in file "main.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;		None
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, status,2, status,0, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : B00/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         0       0       0       0       0
   425 ;;      Locals:         0       0       0       0       0
   426 ;;      Temps:          0       0       0       0       0
   427 ;;      Totals:         0       0       0       0       0
   428 ;;Total ram usage:        0 bytes
   429 ;; Hardware stack levels required when called:    4
   430 ;; This function calls:
   431 ;;		_setup
   432 ;;		_spiInit
   433 ;; This function is called by:
   434 ;;		Startup code after reset
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           
   439                           ;psect for function _main
   440  009C                     _main:
   441  009C                     l813:	
   442                           ;incstack = 0
   443                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   444                           
   445                           
   446                           ;main.c: 113:     setup();
   447  009C  120A  118A  2080  120A  118A  	fcall	_setup
   448  00A1                     l815:
   449                           
   450                           ;main.c: 115:     esclavo1 = 0;
   451  00A1  01F7               	clrf	_esclavo1
   452  00A2                     l817:
   453                           
   454                           ;main.c: 116:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, S
      +                          PI_IDLE_2_ACTIVE);
   455  00A2  01F4               	clrf	spiInit@sDataSample
   456  00A3  01F5               	clrf	spiInit@sClockIdle
   457  00A4  01F6               	clrf	spiInit@sTransmitEdge
   458  00A5  3024               	movlw	36
   459  00A6  120A  118A  2062  120A  118A  	fcall	_spiInit
   460  00AB                     l819:
   461                           
   462                           ;main.c: 119:         PORTD = count;
   463  00AB  0879               	movf	_count,w
   464  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   465  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   466  00AE  0088               	movwf	8	;volatile
   467  00AF  28AB               	goto	l819
   468  00B0  120A  118A  280C   	ljmp	start
   469  00B3                     __end_of_main:
   470                           
   471                           	psect	text1
   472  0062                     __ptext1:	
   473 ;; *************** function _spiInit *****************
   474 ;; Defined at:
   475 ;;		line 13 in file "SPI.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;  sType           1    wreg     enum E1264
   478 ;;  sDataSample     1    4[COMMON] enum E1272
   479 ;;  sClockIdle      1    5[COMMON] enum E1276
   480 ;;  sTransmitEdg    1    6[COMMON] enum E1280
   481 ;; Auto vars:     Size  Location     Type
   482 ;;  sType           1    0[BANK0 ] enum E1264
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, status,2, status,0
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         3       0       0       0       0
   493 ;;      Locals:         0       1       0       0       0
   494 ;;      Temps:          0       0       0       0       0
   495 ;;      Totals:         3       1       0       0       0
   496 ;;Total ram usage:        4 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    3
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           
   507                           ;psect for function _spiInit
   508  0062                     _spiInit:
   509                           
   510                           ;incstack = 0
   511                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   512                           ;spiInit@sType stored from wreg
   513  0062  1283               	bcf	3,5	;RP0=0, select bank0
   514  0063  1303               	bcf	3,6	;RP1=0, select bank0
   515  0064  00A0               	movwf	spiInit@sType
   516  0065                     l803:
   517                           
   518                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   519  0065  1683               	bsf	3,5	;RP0=1, select bank1
   520  0066  1303               	bcf	3,6	;RP1=0, select bank1
   521  0067  1287               	bcf	7,5	;volatile
   522                           
   523                           ;SPI.c: 16:     if(sType & 0b00000100)
   524  0068  1283               	bcf	3,5	;RP0=0, select bank0
   525  0069  1303               	bcf	3,6	;RP1=0, select bank0
   526  006A  1D20               	btfss	spiInit@sType,2
   527  006B  286D               	goto	u121
   528  006C  286E               	goto	u120
   529  006D                     u121:
   530  006D  2874               	goto	l809
   531  006E                     u120:
   532  006E                     l805:
   533                           
   534                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   535  006E  0876               	movf	spiInit@sTransmitEdge,w
   536  006F  1683               	bsf	3,5	;RP0=1, select bank1
   537  0070  1303               	bcf	3,6	;RP1=0, select bank1
   538  0071  0094               	movwf	20	;volatile
   539  0072                     l807:
   540                           
   541                           ;SPI.c: 19:         TRISC3 = 1;
   542  0072  1587               	bsf	7,3	;volatile
   543                           
   544                           ;SPI.c: 20:     }
   545  0073  287A               	goto	l85
   546  0074                     l809:
   547                           
   548                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   549  0074  0874               	movf	spiInit@sDataSample,w
   550  0075  0476               	iorwf	spiInit@sTransmitEdge,w
   551  0076  1683               	bsf	3,5	;RP0=1, select bank1
   552  0077  1303               	bcf	3,6	;RP1=0, select bank1
   553  0078  0094               	movwf	20	;volatile
   554  0079                     l811:
   555                           
   556                           ;SPI.c: 24:         TRISC3 = 0;
   557  0079  1187               	bcf	7,3	;volatile
   558  007A                     l85:	
   559                           ;SPI.c: 25:     }
   560                           
   561                           
   562                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   563  007A  1283               	bcf	3,5	;RP0=0, select bank0
   564  007B  1303               	bcf	3,6	;RP1=0, select bank0
   565  007C  0820               	movf	spiInit@sType,w
   566  007D  0475               	iorwf	spiInit@sClockIdle,w
   567  007E  0094               	movwf	20	;volatile
   568  007F                     l86:
   569  007F  0008               	return
   570  0080                     __end_of_spiInit:
   571                           
   572                           	psect	text2
   573  0080                     __ptext2:	
   574 ;; *************** function _setup *****************
   575 ;; Defined at:
   576 ;;		line 51 in file "main.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, status,2
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   590 ;;      Params:         0       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0
   592 ;;      Temps:          0       0       0       0       0
   593 ;;      Totals:         0       0       0       0       0
   594 ;;Total ram usage:        0 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    3
   597 ;; This function calls:
   598 ;;		Nothing
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           
   605                           ;psect for function _setup
   606  0080                     _setup:
   607  0080                     l697:	
   608                           ;incstack = 0
   609                           ; Regs used in _setup: [wreg+status,2]
   610                           
   611                           
   612                           ;main.c: 52:     TRISAbits.TRISA5 = 1;
   613  0080  1683               	bsf	3,5	;RP0=1, select bank1
   614  0081  1303               	bcf	3,6	;RP1=0, select bank1
   615  0082  1685               	bsf	5,5	;volatile
   616  0083                     l699:
   617                           
   618                           ;main.c: 53:     TRISB = 0b11000011;
   619  0083  30C3               	movlw	195
   620  0084  0086               	movwf	6	;volatile
   621                           
   622                           ;main.c: 54:     INTCON = 0xE8;
   623  0085  30E8               	movlw	232
   624  0086  008B               	movwf	11	;volatile
   625  0087                     l701:
   626                           
   627                           ;main.c: 57:     TRISD = 0b00000000;
   628  0087  0188               	clrf	8	;volatile
   629  0088                     l703:
   630                           
   631                           ;main.c: 60:     PORTB = 0;
   632  0088  1283               	bcf	3,5	;RP0=0, select bank0
   633  0089  1303               	bcf	3,6	;RP1=0, select bank0
   634  008A  0186               	clrf	6	;volatile
   635  008B                     l705:
   636                           
   637                           ;main.c: 61:     PORTD = 0;
   638  008B  0188               	clrf	8	;volatile
   639  008C                     l707:
   640                           
   641                           ;main.c: 63:     IOCBbits.IOCB6 = 1;
   642  008C  1683               	bsf	3,5	;RP0=1, select bank1
   643  008D  1303               	bcf	3,6	;RP1=0, select bank1
   644  008E  1716               	bsf	22,6	;volatile
   645  008F                     l709:
   646                           
   647                           ;main.c: 64:     IOCBbits.IOCB7 = 1;
   648  008F  1796               	bsf	22,7	;volatile
   649  0090                     l711:
   650                           
   651                           ;main.c: 65:     flag = 0;
   652  0090  01F8               	clrf	_flag
   653  0091                     l713:
   654                           
   655                           ;main.c: 66:     SSPIF = 0;
   656  0091  1283               	bcf	3,5	;RP0=0, select bank0
   657  0092  1303               	bcf	3,6	;RP1=0, select bank0
   658  0093  118C               	bcf	12,3	;volatile
   659  0094                     l715:
   660                           
   661                           ;main.c: 67:     PORTAbits.RA5 = 1;
   662  0094  1685               	bsf	5,5	;volatile
   663  0095                     l717:
   664                           
   665                           ;main.c: 68:     SSPIE = 1;
   666  0095  1683               	bsf	3,5	;RP0=1, select bank1
   667  0096  1303               	bcf	3,6	;RP1=0, select bank1
   668  0097  158C               	bsf	12,3	;volatile
   669                           
   670                           ;main.c: 69:     INTCON = 0b11101000;
   671  0098  30E8               	movlw	232
   672  0099  008B               	movwf	11	;volatile
   673  009A                     l719:
   674                           
   675                           ;main.c: 71:     TRISCbits.TRISC3 = 0;
   676  009A  1187               	bcf	7,3	;volatile
   677  009B                     l43:
   678  009B  0008               	return
   679  009C                     __end_of_setup:
   680                           
   681                           	psect	text3
   682  0016                     __ptext3:	
   683 ;; *************** function _ISR *****************
   684 ;; Defined at:
   685 ;;		line 77 in file "main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, status,2, status,0, pclath, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   699 ;;      Params:         0       0       0       0       0
   700 ;;      Locals:         0       0       0       0       0
   701 ;;      Temps:          3       0       0       0       0
   702 ;;      Totals:         3       0       0       0       0
   703 ;;Total ram usage:        3 bytes
   704 ;; Hardware stack levels used:    1
   705 ;; Hardware stack levels required when called:    2
   706 ;; This function calls:
   707 ;;		_spiRead
   708 ;;		_spiWrite
   709 ;; This function is called by:
   710 ;;		Interrupt level 1
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           
   715                           ;psect for function _ISR
   716  0016                     _ISR:
   717  0016                     i1l739:
   718                           
   719                           ;main.c: 79:     if (INTCONbits.RBIF == 1) {
   720  0016  1C0B               	btfss	11,0	;volatile
   721  0017  2819               	goto	u3_21
   722  0018  281A               	goto	u3_20
   723  0019                     u3_21:
   724  0019  285A               	goto	i1l769
   725  001A                     u3_20:
   726  001A                     i1l741:
   727                           
   728                           ;main.c: 80:         if (PORTBbits.RB6 == 0) {
   729  001A  1283               	bcf	3,5	;RP0=0, select bank0
   730  001B  1303               	bcf	3,6	;RP1=0, select bank0
   731  001C  1B06               	btfsc	6,6	;volatile
   732  001D  281F               	goto	u4_21
   733  001E  2820               	goto	u4_20
   734  001F                     u4_21:
   735  001F  2832               	goto	i1l49
   736  0020                     u4_20:
   737  0020  2827               	goto	i1l747
   738  0021                     i1l51:
   739                           
   740                           ;main.c: 82:                 if (PORTBbits.RB6 == 1) {
   741  0021  1F06               	btfss	6,6	;volatile
   742  0022  2824               	goto	u5_21
   743  0023  2825               	goto	u5_20
   744  0024                     u5_21:
   745  0024  2827               	goto	i1l747
   746  0025                     u5_20:
   747  0025                     i1l745:
   748                           
   749                           ;main.c: 83:                     flag = 1;
   750  0025  01F8               	clrf	_flag
   751  0026  0AF8               	incf	_flag,f
   752  0027                     i1l747:
   753                           
   754                           ;main.c: 81:             while (flag == 0) {
   755  0027  0878               	movf	_flag,w
   756  0028  1903               	btfsc	3,2
   757  0029  282B               	goto	u6_21
   758  002A  282C               	goto	u6_20
   759  002B                     u6_21:
   760  002B  2821               	goto	i1l51
   761  002C                     u6_20:
   762  002C                     i1l749:
   763                           
   764                           ;main.c: 86:             flag = 0;
   765  002C  01F8               	clrf	_flag
   766  002D                     i1l751:
   767                           
   768                           ;main.c: 87:             count++;
   769  002D  3001               	movlw	1
   770  002E  00F1               	movwf	??_ISR
   771  002F  0871               	movf	??_ISR,w
   772  0030  07F9               	addwf	_count,f
   773                           
   774                           ;main.c: 89:         } else if (PORTBbits.RB7 == 0) {
   775  0031  2845               	goto	i1l763
   776  0032                     i1l49:
   777  0032  1B86               	btfsc	6,7	;volatile
   778  0033  2835               	goto	u7_21
   779  0034  2836               	goto	u7_20
   780  0035                     u7_21:
   781  0035  2845               	goto	i1l763
   782  0036                     u7_20:
   783  0036  283D               	goto	i1l757
   784  0037                     i1l57:
   785                           
   786                           ;main.c: 91:                 if (PORTBbits.RB7 == 1) {
   787  0037  1F86               	btfss	6,7	;volatile
   788  0038  283A               	goto	u8_21
   789  0039  283B               	goto	u8_20
   790  003A                     u8_21:
   791  003A  283D               	goto	i1l757
   792  003B                     u8_20:
   793  003B                     i1l755:
   794                           
   795                           ;main.c: 92:                     flag = 1;
   796  003B  01F8               	clrf	_flag
   797  003C  0AF8               	incf	_flag,f
   798  003D                     i1l757:
   799                           
   800                           ;main.c: 90:             while (flag == 0) {
   801  003D  0878               	movf	_flag,w
   802  003E  1903               	btfsc	3,2
   803  003F  2841               	goto	u9_21
   804  0040  2842               	goto	u9_20
   805  0041                     u9_21:
   806  0041  2837               	goto	i1l57
   807  0042                     u9_20:
   808  0042                     i1l759:
   809                           
   810                           ;main.c: 95:             flag = 0;
   811  0042  01F8               	clrf	_flag
   812  0043                     i1l761:
   813                           
   814                           ;main.c: 96:             count--;
   815  0043  3001               	movlw	1
   816  0044  02F9               	subwf	_count,f
   817  0045                     i1l763:
   818                           
   819                           ;main.c: 101:         if (PIR1bits.SSPIF == 1){
   820  0045  1D8C               	btfss	12,3	;volatile
   821  0046  2848               	goto	u10_21
   822  0047  2849               	goto	u10_20
   823  0048                     u10_21:
   824  0048  285A               	goto	i1l769
   825  0049                     u10_20:
   826  0049                     i1l765:
   827                           
   828                           ;main.c: 102:             esclavo1 = spiRead();
   829  0049  120A  118A  20B3  120A  118A  	fcall	_spiRead
   830  004E  00F1               	movwf	??_ISR
   831  004F  0871               	movf	??_ISR,w
   832  0050  00F7               	movwf	_esclavo1
   833                           
   834                           ;main.c: 103:             spiWrite(count);
   835  0051  0879               	movf	_count,w
   836  0052  120A  118A  20C3  120A  118A  	fcall	_spiWrite
   837  0057                     i1l767:
   838                           
   839                           ;main.c: 104:             PIR1bits.SSPIF = 0;
   840  0057  1283               	bcf	3,5	;RP0=0, select bank0
   841  0058  1303               	bcf	3,6	;RP1=0, select bank0
   842  0059  118C               	bcf	12,3	;volatile
   843  005A                     i1l769:
   844                           
   845                           ;main.c: 107:     INTCONbits.RBIF = 0;
   846  005A  100B               	bcf	11,0	;volatile
   847  005B                     i1l61:
   848  005B  0873               	movf	??_ISR+2,w
   849  005C  008A               	movwf	10
   850  005D  0E72               	swapf	??_ISR+1,w
   851  005E  0083               	movwf	3
   852  005F  0EFE               	swapf	btemp,f
   853  0060  0E7E               	swapf	btemp,w
   854  0061  0009               	retfie
   855  0062                     __end_of_ISR:
   856                           
   857                           	psect	intentry
   858  0004                     __pintentry:	
   859                           ;incstack = 0
   860                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   861                           
   862  0004                     interrupt_function:
   863  007E                     saved_w	set	btemp
   864  0004  00FE               	movwf	btemp
   865  0005  0E03               	swapf	3,w
   866  0006  00F2               	movwf	??_ISR+1
   867  0007  080A               	movf	10,w
   868  0008  00F3               	movwf	??_ISR+2
   869  0009  120A  118A  2816   	ljmp	_ISR
   870                           
   871                           	psect	text4
   872  00C3                     __ptext4:	
   873 ;; *************** function _spiWrite *****************
   874 ;; Defined at:
   875 ;;		line 35 in file "SPI.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;  dat             1    wreg     unsigned char 
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  dat             1    0[COMMON] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   889 ;;      Params:         0       0       0       0       0
   890 ;;      Locals:         1       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0
   892 ;;      Totals:         1       0       0       0       0
   893 ;;Total ram usage:        1 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_ISR
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           
   903                           ;psect for function _spiWrite
   904  00C3                     _spiWrite:
   905                           
   906                           ;incstack = 0
   907                           ; Regs used in _spiWrite: [wreg]
   908                           ;spiWrite@dat stored from wreg
   909  00C3  00F0               	movwf	spiWrite@dat
   910  00C4                     i1l727:
   911                           
   912                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
   913  00C4  0870               	movf	spiWrite@dat,w
   914  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   915  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   916  00C7  0093               	movwf	19	;volatile
   917  00C8                     i1l95:
   918  00C8  0008               	return
   919  00C9                     __end_of_spiWrite:
   920                           
   921                           	psect	text5
   922  00B3                     __ptext5:	
   923 ;; *************** function _spiRead *****************
   924 ;; Defined at:
   925 ;;		line 48 in file "SPI.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      unsigned char 
   932 ;; Registers used:
   933 ;;		wreg, status,2, status,0, pclath, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   939 ;;      Params:         0       0       0       0       0
   940 ;;      Locals:         0       0       0       0       0
   941 ;;      Temps:          0       0       0       0       0
   942 ;;      Totals:         0       0       0       0       0
   943 ;;Total ram usage:        0 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    1
   946 ;; This function calls:
   947 ;;		_spiReceiveWait
   948 ;; This function is called by:
   949 ;;		_ISR
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           
   954                           ;psect for function _spiRead
   955  00B3                     _spiRead:
   956  00B3                     i1l721:	
   957                           ;incstack = 0
   958                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   959                           
   960                           
   961                           ;SPI.c: 50:     spiReceiveWait();
   962  00B3  120A  118A  20BC  120A  118A  	fcall	_spiReceiveWait
   963  00B8                     i1l723:
   964                           
   965                           ;SPI.c: 51:     return(SSPBUF);
   966  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   967  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   968  00BA  0813               	movf	19,w	;volatile
   969  00BB                     i1l103:
   970  00BB  0008               	return
   971  00BC                     __end_of_spiRead:
   972                           
   973                           	psect	text6
   974  00BC                     __ptext6:	
   975 ;; *************** function _spiReceiveWait *****************
   976 ;; Defined at:
   977 ;;		line 30 in file "SPI.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;		None
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		None
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   991 ;;      Params:         0       0       0       0       0
   992 ;;      Locals:         0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0
   994 ;;      Totals:         0       0       0       0       0
   995 ;;Total ram usage:        0 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; This function calls:
   998 ;;		Nothing
   999 ;; This function is called by:
  1000 ;;		_spiRead
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           
  1005                           ;psect for function _spiReceiveWait
  1006  00BC                     _spiReceiveWait:
  1007  00BC                     i1l695:	
  1008                           ;incstack = 0
  1009                           ; Regs used in _spiReceiveWait: []
  1010                           
  1011  00BC                     i1l89:	
  1012                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1013                           
  1014  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  1015  00BD  1303               	bcf	3,6	;RP1=0, select bank1
  1016  00BE  1C14               	btfss	20,0	;volatile
  1017  00BF  28C1               	goto	u1_21
  1018  00C0  28C2               	goto	u1_20
  1019  00C1                     u1_21:
  1020  00C1  28BC               	goto	i1l89
  1021  00C2                     u1_20:
  1022  00C2                     i1l92:
  1023  00C2  0008               	return
  1024  00C3                     __end_of_spiReceiveWait:
  1025  007E                     btemp	set	126	;btemp
  1026  007E                     wtemp0	set	126
  1027                           
  1028                           	psect	config
  1029                           
  1030                           ;Config register CONFIG1 @ 0x2007
  1031                           ;	Oscillator Selection bits
  1032                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
  1033                           ;	Watchdog Timer Enable bit
  1034                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1035                           ;	Power-up Timer Enable bit
  1036                           ;	PWRTE = OFF, PWRT disabled
  1037                           ;	RE3/MCLR pin function select bit
  1038                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1039                           ;	Code Protection bit
  1040                           ;	CP = OFF, Program memory code protection is disabled
  1041                           ;	Data Code Protection bit
  1042                           ;	CPD = OFF, Data memory code protection is disabled
  1043                           ;	Brown Out Reset Selection bits
  1044                           ;	BOREN = OFF, BOR disabled
  1045                           ;	Internal External Switchover bit
  1046                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1047                           ;	Fail-Safe Clock Monitor Enabled bit
  1048                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1049                           ;	Low Voltage Programming Enable bit
  1050                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1051                           ;	In-Circuit Debugger Mode bit
  1052                           ;	DEBUG = 0x1, unprogrammed default
  1053  2007                     	org	8199
  1054  2007  20D5               	dw	8405
  1055                           
  1056                           ;Config register CONFIG2 @ 0x2008
  1057                           ;	Brown-out Reset Selection bit
  1058                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1059                           ;	Flash Program Memory Self Write Enable bits
  1060                           ;	WRT = OFF, Write protection off
  1061  2008                     	org	8200
  1062  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      1       1
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    _ISR->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     456
                              _setup
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              4 COMMON     3     0      3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _spiInit

 _ISR (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      1       1       5        1.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Feb 20 19:24:56 2021

            _SSPSTATbits 0094                       l43 009B                       l85 007A  
                     l86 007F                      l701 0087                      l711 0090  
                    l703 0088                      l713 0091                      l705 008B  
                    l715 0094                      l707 008C                      l811 0079  
                    l803 0065                      l717 0095                      l709 008F  
                    l805 006E                      l813 009C                      l719 009A  
                    l807 0072                      l815 00A1                      l809 0074  
                    l817 00A2                      l819 00AB                      l697 0080  
                    l699 0083                      u120 006E                      u121 006D  
                    _ISR 0016                     ?_ISR 0070                     i1l51 0021  
                   i1l61 005B                     i1l57 0037                     i1l49 0032  
                   i1l92 00C2                     i1l95 00C8                     i1l89 00BC  
                   u1_20 00C2                     u1_21 00C1                     u3_20 001A  
                   u3_21 0019                     u4_20 0020                     u4_21 001F  
                   u5_20 0025                     u5_21 0024                     u6_20 002C  
                   u6_21 002B                     u7_20 0036                     u7_21 0035  
                   u8_20 003B                     u8_21 003A                     u9_20 0042  
                   u9_21 0041                     _flag 0078                     _main 009C  
                   btemp 007E                     start 000C                    ??_ISR 0071  
                  ?_main 0070                    i1l103 00BB                    i1l721 00B3  
                  i1l723 00B8                    i1l741 001A                    i1l727 00C4  
                  i1l751 002D                    i1l761 0043                    i1l745 0025  
                  i1l755 003B                    i1l763 0045                    i1l747 0027  
                  i1l739 0016                    i1l765 0049                    i1l757 003D  
                  i1l749 002C                    i1l695 00BC                    i1l767 0057  
                  i1l759 0042                    i1l769 005A                    u10_20 0049  
                  u10_21 0048                    _PORTB 0006                    _PORTD 0008  
                  _TRISB 0086                    _TRISD 0088                    _SSPIE 0463  
                  _SSPIF 0063                    _count 0079                    _setup 0080  
                  pclath 000A          __end_of_spiInit 0080          __end_of_spiRead 00BC  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 00B3                   ??_main 0077                   ?_setup 0070  
                 _INTCON 000B                   _TRISC3 043B                   _TRISC5 043D  
                 _SSPCON 0014                   _SSPBUF 0013                   saved_w 007E  
       __end_of_spiWrite 00C9                ??_spiInit 0077                ??_spiRead 0070  
__end_of__initialization 0012           __pcstackCOMMON 0070            __end_of_setup 009C  
                ??_setup 0074               __pmaintext 009C               __pintentry 0004  
__size_of_spiReceiveWait 0007                  _SSPSTAT 0094                ?_spiWrite 0070  
                __ptext1 0062                  __ptext2 0080                  __ptext3 0016  
                __ptext4 00C3                  __ptext5 00B3                  __ptext6 00BC  
           __size_of_ISR 004C                  _spiInit 0062                  _spiRead 00B3  
   end_of_initialization 0012               ??_spiWrite 0070                _PORTAbits 0005  
              _PORTBbits 0006                _TRISAbits 0085                _TRISCbits 0087  
            spiWrite@dat 0070           _spiReceiveWait 00BC      start_initialization 000F  
            __end_of_ISR 0062   __end_of_spiReceiveWait 00C3              __pbssCOMMON 0077  
              ___latbits 0002            __pcstackBANK0 0020          ?_spiReceiveWait 0070  
      __size_of_spiWrite 0006                 ?_spiInit 0074                 ?_spiRead 0070  
         __size_of_setup 001C     spiInit@sTransmitEdge 0076        interrupt_function 0004  
               _IOCBbits 0096       spiInit@sDataSample 0074                 _PIR1bits 000C  
       __size_of_spiInit 001E         __size_of_spiRead 0009                 _esclavo1 0077  
          __size_of_main 0017                 _spiWrite 00C3             spiInit@sType 0020  
      spiInit@sClockIdle 0075               _INTCONbits 000B                 intlevel1 0000  
       ??_spiReceiveWait 0070  
