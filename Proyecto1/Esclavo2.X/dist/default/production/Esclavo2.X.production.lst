

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Feb 20 00:09:26 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0013                     _SSPBUF	set	19
   288  0014                     _SSPCON	set	20
   289  000C                     _PIR1bits	set	12
   290  0006                     _PORTBbits	set	6
   291  000B                     _INTCONbits	set	11
   292  0005                     _PORTAbits	set	5
   293  0008                     _PORTD	set	8
   294  0006                     _PORTB	set	6
   295  000B                     _INTCON	set	11
   296  0063                     _SSPIF	set	99
   297  0094                     _SSPSTATbits	set	148
   298  0094                     _SSPSTAT	set	148
   299  0096                     _IOCBbits	set	150
   300  0087                     _TRISC	set	135
   301  0088                     _TRISD	set	136
   302  0086                     _TRISB	set	134
   303  0085                     _TRISAbits	set	133
   304  043B                     _TRISC3	set	1083
   305  043D                     _TRISC5	set	1085
   306  0463                     _SSPIE	set	1123
   307                           
   308                           	psect	cinit
   309  000F                     start_initialization:	
   310                           ; #config settings
   311                           
   312  000F                     __initialization:
   313                           
   314                           ; Clear objects allocated to COMMON
   315  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   316  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   317  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   318  0012                     end_of_initialization:	
   319                           ;End of C runtime variable initialization code
   320                           
   321  0012                     __end_of__initialization:
   322  0012  0183               	clrf	3
   323  0013  120A  118A  289B   	ljmp	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMMON
   326  0077                     __pbssCOMMON:
   327  0077                     _esclavo2:
   328  0077                     	ds	1
   329  0078                     _flag:
   330  0078                     	ds	1
   331  0079                     _count:
   332  0079                     	ds	1
   333                           
   334                           	psect	cstackCOMMON
   335  0070                     __pcstackCOMMON:
   336  0070                     ?_spiRead:
   337  0070                     ??_spiRead:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_spiWrite:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ??_spiWrite:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_setup:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_ISR:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_main:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_spiReceiveWait:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ??_spiReceiveWait:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     spiWrite@dat:	
   362                           ; 1 bytes @ 0x0
   363                           
   364                           
   365                           ; 1 bytes @ 0x0
   366  0070                     	ds	1
   367  0071                     ??_ISR:
   368                           
   369                           ; 1 bytes @ 0x1
   370  0071                     	ds	3
   371  0074                     ?_spiInit:
   372  0074                     ??_setup:	
   373                           ; 1 bytes @ 0x4
   374                           
   375  0074                     spiInit@sDataSample:	
   376                           ; 1 bytes @ 0x4
   377                           
   378                           
   379                           ; 1 bytes @ 0x4
   380  0074                     	ds	1
   381  0075                     spiInit@sClockIdle:
   382                           
   383                           ; 1 bytes @ 0x5
   384  0075                     	ds	1
   385  0076                     spiInit@sTransmitEdge:
   386                           
   387                           ; 1 bytes @ 0x6
   388  0076                     	ds	1
   389  0077                     ??_spiInit:
   390  0077                     ??_main:	
   391                           ; 1 bytes @ 0x7
   392                           
   393                           
   394                           	psect	cstackBANK0
   395  0020                     __pcstackBANK0:	
   396                           ; 1 bytes @ 0x7
   397                           
   398  0020                     spiInit@sType:
   399                           
   400                           ; 1 bytes @ 0x0
   401  0020                     	ds	1
   402                           
   403                           	psect	maintext
   404  009B                     __pmaintext:	
   405 ;;
   406 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   407 ;;
   408 ;; *************** function _main *****************
   409 ;; Defined at:
   410 ;;		line 109 in file "main.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;		None
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, status,2, status,0, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : B00/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         0       0       0       0       0
   425 ;;      Locals:         0       0       0       0       0
   426 ;;      Temps:          0       0       0       0       0
   427 ;;      Totals:         0       0       0       0       0
   428 ;;Total ram usage:        0 bytes
   429 ;; Hardware stack levels required when called:    4
   430 ;; This function calls:
   431 ;;		_setup
   432 ;;		_spiInit
   433 ;; This function is called by:
   434 ;;		Startup code after reset
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           
   439                           ;psect for function _main
   440  009B                     _main:
   441  009B                     l807:	
   442                           ;incstack = 0
   443                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   444                           
   445                           
   446                           ;main.c: 110:     setup();
   447  009B  120A  118A  2080  120A  118A  	fcall	_setup
   448  00A0                     l809:
   449                           
   450                           ;main.c: 111:     count = 0;
   451  00A0  01F9               	clrf	_count
   452  00A1                     l811:
   453                           
   454                           ;main.c: 112:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, S
      +                          PI_IDLE_2_ACTIVE);
   455  00A1  01F4               	clrf	spiInit@sDataSample
   456  00A2  01F5               	clrf	spiInit@sClockIdle
   457  00A3  01F6               	clrf	spiInit@sTransmitEdge
   458  00A4  3024               	movlw	36
   459  00A5  120A  118A  2062  120A  118A  	fcall	_spiInit
   460  00AA                     l813:
   461                           
   462                           ;main.c: 115:         PORTD = count;
   463  00AA  0879               	movf	_count,w
   464  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   465  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   466  00AD  0088               	movwf	8	;volatile
   467  00AE  28AA               	goto	l813
   468  00AF  120A  118A  280C   	ljmp	start
   469  00B2                     __end_of_main:
   470                           
   471                           	psect	text1
   472  0062                     __ptext1:	
   473 ;; *************** function _spiInit *****************
   474 ;; Defined at:
   475 ;;		line 13 in file "SPI.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;  sType           1    wreg     enum E1264
   478 ;;  sDataSample     1    4[COMMON] enum E1272
   479 ;;  sClockIdle      1    5[COMMON] enum E1276
   480 ;;  sTransmitEdg    1    6[COMMON] enum E1280
   481 ;; Auto vars:     Size  Location     Type
   482 ;;  sType           1    0[BANK0 ] enum E1264
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, status,2, status,0
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         3       0       0       0       0
   493 ;;      Locals:         0       1       0       0       0
   494 ;;      Temps:          0       0       0       0       0
   495 ;;      Totals:         3       1       0       0       0
   496 ;;Total ram usage:        4 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    3
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           
   507                           ;psect for function _spiInit
   508  0062                     _spiInit:
   509                           
   510                           ;incstack = 0
   511                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   512                           ;spiInit@sType stored from wreg
   513  0062  1283               	bcf	3,5	;RP0=0, select bank0
   514  0063  1303               	bcf	3,6	;RP1=0, select bank0
   515  0064  00A0               	movwf	spiInit@sType
   516  0065                     l797:
   517                           
   518                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   519  0065  1683               	bsf	3,5	;RP0=1, select bank1
   520  0066  1303               	bcf	3,6	;RP1=0, select bank1
   521  0067  1287               	bcf	7,5	;volatile
   522                           
   523                           ;SPI.c: 16:     if(sType & 0b00000100)
   524  0068  1283               	bcf	3,5	;RP0=0, select bank0
   525  0069  1303               	bcf	3,6	;RP1=0, select bank0
   526  006A  1D20               	btfss	spiInit@sType,2
   527  006B  286D               	goto	u121
   528  006C  286E               	goto	u120
   529  006D                     u121:
   530  006D  2874               	goto	l803
   531  006E                     u120:
   532  006E                     l799:
   533                           
   534                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   535  006E  0876               	movf	spiInit@sTransmitEdge,w
   536  006F  1683               	bsf	3,5	;RP0=1, select bank1
   537  0070  1303               	bcf	3,6	;RP1=0, select bank1
   538  0071  0094               	movwf	20	;volatile
   539  0072                     l801:
   540                           
   541                           ;SPI.c: 19:         TRISC3 = 1;
   542  0072  1587               	bsf	7,3	;volatile
   543                           
   544                           ;SPI.c: 20:     }
   545  0073  287A               	goto	l85
   546  0074                     l803:
   547                           
   548                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   549  0074  0874               	movf	spiInit@sDataSample,w
   550  0075  0476               	iorwf	spiInit@sTransmitEdge,w
   551  0076  1683               	bsf	3,5	;RP0=1, select bank1
   552  0077  1303               	bcf	3,6	;RP1=0, select bank1
   553  0078  0094               	movwf	20	;volatile
   554  0079                     l805:
   555                           
   556                           ;SPI.c: 24:         TRISC3 = 0;
   557  0079  1187               	bcf	7,3	;volatile
   558  007A                     l85:	
   559                           ;SPI.c: 25:     }
   560                           
   561                           
   562                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   563  007A  1283               	bcf	3,5	;RP0=0, select bank0
   564  007B  1303               	bcf	3,6	;RP1=0, select bank0
   565  007C  0820               	movf	spiInit@sType,w
   566  007D  0475               	iorwf	spiInit@sClockIdle,w
   567  007E  0094               	movwf	20	;volatile
   568  007F                     l86:
   569  007F  0008               	return
   570  0080                     __end_of_spiInit:
   571                           
   572                           	psect	text2
   573  0080                     __ptext2:	
   574 ;; *************** function _setup *****************
   575 ;; Defined at:
   576 ;;		line 51 in file "main.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, status,2
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   590 ;;      Params:         0       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0
   592 ;;      Temps:          0       0       0       0       0
   593 ;;      Totals:         0       0       0       0       0
   594 ;;Total ram usage:        0 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    3
   597 ;; This function calls:
   598 ;;		Nothing
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           
   605                           ;psect for function _setup
   606  0080                     _setup:
   607  0080                     l697:	
   608                           ;incstack = 0
   609                           ; Regs used in _setup: [wreg+status,2]
   610                           
   611                           
   612                           ;main.c: 52:     TRISAbits.TRISA5 = 1;
   613  0080  1683               	bsf	3,5	;RP0=1, select bank1
   614  0081  1303               	bcf	3,6	;RP1=0, select bank1
   615  0082  1685               	bsf	5,5	;volatile
   616  0083                     l699:
   617                           
   618                           ;main.c: 53:     TRISB = 0b11000011;
   619  0083  30C3               	movlw	195
   620  0084  0086               	movwf	6	;volatile
   621                           
   622                           ;main.c: 54:     INTCON = 0xE8;
   623  0085  30E8               	movlw	232
   624  0086  008B               	movwf	11	;volatile
   625  0087                     l701:
   626                           
   627                           ;main.c: 57:     TRISD = 0b00000000;
   628  0087  0188               	clrf	8	;volatile
   629  0088                     l703:
   630                           
   631                           ;main.c: 58:     TRISC = 0b00011000;
   632  0088  3018               	movlw	24
   633  0089  0087               	movwf	7	;volatile
   634                           
   635                           ;main.c: 60:     PORTB = 0;
   636  008A  1283               	bcf	3,5	;RP0=0, select bank0
   637  008B  1303               	bcf	3,6	;RP1=0, select bank0
   638  008C  0186               	clrf	6	;volatile
   639                           
   640                           ;main.c: 61:     PORTD = 0;
   641  008D  0188               	clrf	8	;volatile
   642  008E                     l705:
   643                           
   644                           ;main.c: 63:     IOCBbits.IOCB6 = 1;
   645  008E  1683               	bsf	3,5	;RP0=1, select bank1
   646  008F  1303               	bcf	3,6	;RP1=0, select bank1
   647  0090  1716               	bsf	22,6	;volatile
   648  0091                     l707:
   649                           
   650                           ;main.c: 64:     IOCBbits.IOCB7 = 1;
   651  0091  1796               	bsf	22,7	;volatile
   652                           
   653                           ;main.c: 65:     flag = 0;
   654  0092  01F8               	clrf	_flag
   655  0093                     l709:
   656                           
   657                           ;main.c: 66:     SSPIF = 0;
   658  0093  1283               	bcf	3,5	;RP0=0, select bank0
   659  0094  1303               	bcf	3,6	;RP1=0, select bank0
   660  0095  118C               	bcf	12,3	;volatile
   661  0096                     l711:
   662                           
   663                           ;main.c: 67:     PORTAbits.RA5 = 1;
   664  0096  1685               	bsf	5,5	;volatile
   665  0097                     l713:
   666                           
   667                           ;main.c: 68:     SSPIE = 1;
   668  0097  1683               	bsf	3,5	;RP0=1, select bank1
   669  0098  1303               	bcf	3,6	;RP1=0, select bank1
   670  0099  158C               	bsf	12,3	;volatile
   671  009A                     l43:
   672  009A  0008               	return
   673  009B                     __end_of_setup:
   674                           
   675                           	psect	text3
   676  0016                     __ptext3:	
   677 ;; *************** function _ISR *****************
   678 ;; Defined at:
   679 ;;		line 74 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, status,2, status,0, pclath, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   693 ;;      Params:         0       0       0       0       0
   694 ;;      Locals:         0       0       0       0       0
   695 ;;      Temps:          3       0       0       0       0
   696 ;;      Totals:         3       0       0       0       0
   697 ;;Total ram usage:        3 bytes
   698 ;; Hardware stack levels used:    1
   699 ;; Hardware stack levels required when called:    2
   700 ;; This function calls:
   701 ;;		_spiRead
   702 ;;		_spiWrite
   703 ;; This function is called by:
   704 ;;		Interrupt level 1
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           
   709                           ;psect for function _ISR
   710  0016                     _ISR:
   711  0016                     i1l733:
   712                           
   713                           ;main.c: 76:     if (INTCONbits.RBIF == 1) {
   714  0016  1C0B               	btfss	11,0	;volatile
   715  0017  2819               	goto	u3_21
   716  0018  281A               	goto	u3_20
   717  0019                     u3_21:
   718  0019  285A               	goto	i1l763
   719  001A                     u3_20:
   720  001A                     i1l735:
   721                           
   722                           ;main.c: 77:         if (PORTBbits.RB6 == 0) {
   723  001A  1283               	bcf	3,5	;RP0=0, select bank0
   724  001B  1303               	bcf	3,6	;RP1=0, select bank0
   725  001C  1B06               	btfsc	6,6	;volatile
   726  001D  281F               	goto	u4_21
   727  001E  2820               	goto	u4_20
   728  001F                     u4_21:
   729  001F  2832               	goto	i1l49
   730  0020                     u4_20:
   731  0020  2827               	goto	i1l741
   732  0021                     i1l51:
   733                           
   734                           ;main.c: 79:                 if (PORTBbits.RB6 == 1) {
   735  0021  1F06               	btfss	6,6	;volatile
   736  0022  2824               	goto	u5_21
   737  0023  2825               	goto	u5_20
   738  0024                     u5_21:
   739  0024  2827               	goto	i1l741
   740  0025                     u5_20:
   741  0025                     i1l739:
   742                           
   743                           ;main.c: 80:                     flag = 1;
   744  0025  01F8               	clrf	_flag
   745  0026  0AF8               	incf	_flag,f
   746  0027                     i1l741:
   747                           
   748                           ;main.c: 78:             while (flag == 0) {
   749  0027  0878               	movf	_flag,w
   750  0028  1903               	btfsc	3,2
   751  0029  282B               	goto	u6_21
   752  002A  282C               	goto	u6_20
   753  002B                     u6_21:
   754  002B  2821               	goto	i1l51
   755  002C                     u6_20:
   756  002C                     i1l743:
   757                           
   758                           ;main.c: 83:             flag = 0;
   759  002C  01F8               	clrf	_flag
   760  002D                     i1l745:
   761                           
   762                           ;main.c: 84:             count++;
   763  002D  3001               	movlw	1
   764  002E  00F1               	movwf	??_ISR
   765  002F  0871               	movf	??_ISR,w
   766  0030  07F9               	addwf	_count,f
   767                           
   768                           ;main.c: 86:         } else if (PORTBbits.RB7 == 0) {
   769  0031  2845               	goto	i1l757
   770  0032                     i1l49:
   771  0032  1B86               	btfsc	6,7	;volatile
   772  0033  2835               	goto	u7_21
   773  0034  2836               	goto	u7_20
   774  0035                     u7_21:
   775  0035  2845               	goto	i1l757
   776  0036                     u7_20:
   777  0036  283D               	goto	i1l751
   778  0037                     i1l57:
   779                           
   780                           ;main.c: 88:                 if (PORTBbits.RB7 == 1) {
   781  0037  1F86               	btfss	6,7	;volatile
   782  0038  283A               	goto	u8_21
   783  0039  283B               	goto	u8_20
   784  003A                     u8_21:
   785  003A  283D               	goto	i1l751
   786  003B                     u8_20:
   787  003B                     i1l749:
   788                           
   789                           ;main.c: 89:                     flag = 1;
   790  003B  01F8               	clrf	_flag
   791  003C  0AF8               	incf	_flag,f
   792  003D                     i1l751:
   793                           
   794                           ;main.c: 87:             while (flag == 0) {
   795  003D  0878               	movf	_flag,w
   796  003E  1903               	btfsc	3,2
   797  003F  2841               	goto	u9_21
   798  0040  2842               	goto	u9_20
   799  0041                     u9_21:
   800  0041  2837               	goto	i1l57
   801  0042                     u9_20:
   802  0042                     i1l753:
   803                           
   804                           ;main.c: 92:             flag = 0;
   805  0042  01F8               	clrf	_flag
   806  0043                     i1l755:
   807                           
   808                           ;main.c: 93:             count--;
   809  0043  3001               	movlw	1
   810  0044  02F9               	subwf	_count,f
   811  0045                     i1l757:
   812                           
   813                           ;main.c: 98:         if (PIR1bits.SSPIF == 1){
   814  0045  1D8C               	btfss	12,3	;volatile
   815  0046  2848               	goto	u10_21
   816  0047  2849               	goto	u10_20
   817  0048                     u10_21:
   818  0048  285A               	goto	i1l763
   819  0049                     u10_20:
   820  0049                     i1l759:
   821                           
   822                           ;main.c: 99:             esclavo2 = spiRead();
   823  0049  120A  118A  20B2  120A  118A  	fcall	_spiRead
   824  004E  00F1               	movwf	??_ISR
   825  004F  0871               	movf	??_ISR,w
   826  0050  00F7               	movwf	_esclavo2
   827                           
   828                           ;main.c: 100:             spiWrite(count);
   829  0051  0879               	movf	_count,w
   830  0052  120A  118A  20C2  120A  118A  	fcall	_spiWrite
   831  0057                     i1l761:
   832                           
   833                           ;main.c: 101:             PIR1bits.SSPIF = 0;
   834  0057  1283               	bcf	3,5	;RP0=0, select bank0
   835  0058  1303               	bcf	3,6	;RP1=0, select bank0
   836  0059  118C               	bcf	12,3	;volatile
   837  005A                     i1l763:
   838                           
   839                           ;main.c: 104:     INTCONbits.RBIF = 0;
   840  005A  100B               	bcf	11,0	;volatile
   841  005B                     i1l61:
   842  005B  0873               	movf	??_ISR+2,w
   843  005C  008A               	movwf	10
   844  005D  0E72               	swapf	??_ISR+1,w
   845  005E  0083               	movwf	3
   846  005F  0EFE               	swapf	btemp,f
   847  0060  0E7E               	swapf	btemp,w
   848  0061  0009               	retfie
   849  0062                     __end_of_ISR:
   850                           
   851                           	psect	intentry
   852  0004                     __pintentry:	
   853                           ;incstack = 0
   854                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   855                           
   856  0004                     interrupt_function:
   857  007E                     saved_w	set	btemp
   858  0004  00FE               	movwf	btemp
   859  0005  0E03               	swapf	3,w
   860  0006  00F2               	movwf	??_ISR+1
   861  0007  080A               	movf	10,w
   862  0008  00F3               	movwf	??_ISR+2
   863  0009  120A  118A  2816   	ljmp	_ISR
   864                           
   865                           	psect	text4
   866  00C2                     __ptext4:	
   867 ;; *************** function _spiWrite *****************
   868 ;; Defined at:
   869 ;;		line 35 in file "SPI.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  dat             1    wreg     unsigned char 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  dat             1    0[COMMON] unsigned char 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   883 ;;      Params:         0       0       0       0       0
   884 ;;      Locals:         1       0       0       0       0
   885 ;;      Temps:          0       0       0       0       0
   886 ;;      Totals:         1       0       0       0       0
   887 ;;Total ram usage:        1 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_ISR
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           
   897                           ;psect for function _spiWrite
   898  00C2                     _spiWrite:
   899                           
   900                           ;incstack = 0
   901                           ; Regs used in _spiWrite: [wreg]
   902                           ;spiWrite@dat stored from wreg
   903  00C2  00F0               	movwf	spiWrite@dat
   904  00C3                     i1l721:
   905                           
   906                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
   907  00C3  0870               	movf	spiWrite@dat,w
   908  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   909  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   910  00C6  0093               	movwf	19	;volatile
   911  00C7                     i1l95:
   912  00C7  0008               	return
   913  00C8                     __end_of_spiWrite:
   914                           
   915                           	psect	text5
   916  00B2                     __ptext5:	
   917 ;; *************** function _spiRead *****************
   918 ;; Defined at:
   919 ;;		line 48 in file "SPI.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;		None
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      unsigned char 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0, pclath, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   933 ;;      Params:         0       0       0       0       0
   934 ;;      Locals:         0       0       0       0       0
   935 ;;      Temps:          0       0       0       0       0
   936 ;;      Totals:         0       0       0       0       0
   937 ;;Total ram usage:        0 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    1
   940 ;; This function calls:
   941 ;;		_spiReceiveWait
   942 ;; This function is called by:
   943 ;;		_ISR
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           
   948                           ;psect for function _spiRead
   949  00B2                     _spiRead:
   950  00B2                     i1l715:	
   951                           ;incstack = 0
   952                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   953                           
   954                           
   955                           ;SPI.c: 50:     spiReceiveWait();
   956  00B2  120A  118A  20BB  120A  118A  	fcall	_spiReceiveWait
   957  00B7                     i1l717:
   958                           
   959                           ;SPI.c: 51:     return(SSPBUF);
   960  00B7  1283               	bcf	3,5	;RP0=0, select bank0
   961  00B8  1303               	bcf	3,6	;RP1=0, select bank0
   962  00B9  0813               	movf	19,w	;volatile
   963  00BA                     i1l103:
   964  00BA  0008               	return
   965  00BB                     __end_of_spiRead:
   966                           
   967                           	psect	text6
   968  00BB                     __ptext6:	
   969 ;; *************** function _spiReceiveWait *****************
   970 ;; Defined at:
   971 ;;		line 30 in file "SPI.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;		None
   974 ;; Auto vars:     Size  Location     Type
   975 ;;		None
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		None
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   985 ;;      Params:         0       0       0       0       0
   986 ;;      Locals:         0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0
   988 ;;      Totals:         0       0       0       0       0
   989 ;;Total ram usage:        0 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_spiRead
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           
   999                           ;psect for function _spiReceiveWait
  1000  00BB                     _spiReceiveWait:
  1001  00BB                     i1l695:	
  1002                           ;incstack = 0
  1003                           ; Regs used in _spiReceiveWait: []
  1004                           
  1005  00BB                     i1l89:	
  1006                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1007                           
  1008  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  1009  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  1010  00BD  1C14               	btfss	20,0	;volatile
  1011  00BE  28C0               	goto	u1_21
  1012  00BF  28C1               	goto	u1_20
  1013  00C0                     u1_21:
  1014  00C0  28BB               	goto	i1l89
  1015  00C1                     u1_20:
  1016  00C1                     i1l92:
  1017  00C1  0008               	return
  1018  00C2                     __end_of_spiReceiveWait:
  1019  007E                     btemp	set	126	;btemp
  1020  007E                     wtemp0	set	126
  1021                           
  1022                           	psect	config
  1023                           
  1024                           ;Config register CONFIG1 @ 0x2007
  1025                           ;	Oscillator Selection bits
  1026                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
  1027                           ;	Watchdog Timer Enable bit
  1028                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1029                           ;	Power-up Timer Enable bit
  1030                           ;	PWRTE = OFF, PWRT disabled
  1031                           ;	RE3/MCLR pin function select bit
  1032                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1033                           ;	Code Protection bit
  1034                           ;	CP = OFF, Program memory code protection is disabled
  1035                           ;	Data Code Protection bit
  1036                           ;	CPD = OFF, Data memory code protection is disabled
  1037                           ;	Brown Out Reset Selection bits
  1038                           ;	BOREN = OFF, BOR disabled
  1039                           ;	Internal External Switchover bit
  1040                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1041                           ;	Fail-Safe Clock Monitor Enabled bit
  1042                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1043                           ;	Low Voltage Programming Enable bit
  1044                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1045                           ;	In-Circuit Debugger Mode bit
  1046                           ;	DEBUG = 0x1, unprogrammed default
  1047  2007                     	org	8199
  1048  2007  20D5               	dw	8405
  1049                           
  1050                           ;Config register CONFIG2 @ 0x2008
  1051                           ;	Brown-out Reset Selection bit
  1052                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1053                           ;	Flash Program Memory Self Write Enable bits
  1054                           ;	WRT = OFF, Write protection off
  1055  2008                     	org	8200
  1056  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      1       1
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    _ISR->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     456
                              _setup
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              4 COMMON     3     0      3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _spiInit

 _ISR (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      1       1       5        1.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Feb 20 00:09:26 2021

            _SSPSTATbits 0094                       l43 009A                       l85 007A  
                     l86 007F                      l701 0087                      l711 0096  
                    l703 0088                      l713 0097                      l705 008E  
                    l801 0072                      l707 0091                      l803 0074  
                    l811 00A1                      l709 0093                      l805 0079  
                    l813 00AA                      l807 009B                      l809 00A0  
                    l697 0080                      l699 0083                      l797 0065  
                    l799 006E                      u120 006E                      u121 006D  
                    _ISR 0016                     ?_ISR 0070                     i1l51 0021  
                   i1l61 005B                     i1l57 0037                     i1l49 0032  
                   i1l92 00C1                     i1l95 00C7                     i1l89 00BB  
                   u1_20 00C1                     u1_21 00C0                     u3_20 001A  
                   u3_21 0019                     u4_20 0020                     u4_21 001F  
                   u5_20 0025                     u5_21 0024                     u6_20 002C  
                   u6_21 002B                     u7_20 0036                     u7_21 0035  
                   u8_20 003B                     u8_21 003A                     u9_20 0042  
                   u9_21 0041                     _flag 0078                     _main 009B  
                   btemp 007E                     start 000C                    ??_ISR 0071  
                  ?_main 0070                    i1l103 00BA                    i1l721 00C3  
                  i1l715 00B2                    i1l717 00B7                    i1l741 0027  
                  i1l733 0016                    i1l751 003D                    i1l743 002C  
                  i1l735 001A                    i1l761 0057                    i1l753 0042  
                  i1l745 002D                    i1l755 0043                    i1l739 0025  
                  i1l763 005A                    i1l749 003B                    i1l757 0045  
                  i1l695 00BB                    i1l759 0049                    u10_20 0049  
                  u10_21 0048                    _PORTB 0006                    _PORTD 0008  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _SSPIE 0463                    _SSPIF 0063                    _count 0079  
                  _setup 0080                    pclath 000A          __end_of_spiInit 0080  
        __end_of_spiRead 00BB                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 00B2                   ??_main 0077  
                 ?_setup 0070                   _INTCON 000B                   _TRISC3 043B  
                 _TRISC5 043D                   _SSPCON 0014                   _SSPBUF 0013  
                 saved_w 007E         __end_of_spiWrite 00C8                ??_spiInit 0077  
              ??_spiRead 0070  __end_of__initialization 0012           __pcstackCOMMON 0070  
          __end_of_setup 009B                  ??_setup 0074               __pmaintext 009B  
             __pintentry 0004  __size_of_spiReceiveWait 0007                  _SSPSTAT 0094  
              ?_spiWrite 0070                  __ptext1 0062                  __ptext2 0080  
                __ptext3 0016                  __ptext4 00C2                  __ptext5 00B2  
                __ptext6 00BB             __size_of_ISR 004C                  _spiInit 0062  
                _spiRead 00B2     end_of_initialization 0012               ??_spiWrite 0070  
              _PORTAbits 0005                _PORTBbits 0006                _TRISAbits 0085  
            spiWrite@dat 0070           _spiReceiveWait 00BB      start_initialization 000F  
            __end_of_ISR 0062   __end_of_spiReceiveWait 00C2              __pbssCOMMON 0077  
              ___latbits 0002            __pcstackBANK0 0020          ?_spiReceiveWait 0070  
      __size_of_spiWrite 0006                 ?_spiInit 0074                 ?_spiRead 0070  
         __size_of_setup 001B     spiInit@sTransmitEdge 0076        interrupt_function 0004  
               _IOCBbits 0096       spiInit@sDataSample 0074                 _PIR1bits 000C  
       __size_of_spiInit 001E         __size_of_spiRead 0009                 _esclavo2 0077  
          __size_of_main 0017                 _spiWrite 00C2             spiInit@sType 0020  
      spiInit@sClockIdle 0075               _INTCONbits 000B                 intlevel1 0000  
       ??_spiReceiveWait 0070  
