

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Feb 07 18:50:35 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0008                     _PORTDbits	set	8
   290  0007                     _PORTC	set	7
   291  0005                     _PORTA	set	5
   292  0088                     _TRISD	set	136
   293  0087                     _TRISC	set	135
   294  0189                     _ANSELH	set	393
   295  0188                     _ANSEL	set	392
   296                           
   297                           	psect	strings
   298  0003                     __pstrings:
   299  0003                     stringtab:
   300  0003                     __stringtab:
   301  0003                     stringcode:	
   302                           ;	String table - string pointers are 1 byte each
   303                           
   304  0003                     stringdir:
   305  0003  3000               	movlw	high stringdir
   306  0004  008A               	movwf	10
   307  0005  0804               	movf	4,w
   308  0006  0A84               	incf	4,f
   309  0007  0782               	addwf	2,f
   310  0008                     __stringbase:
   311  0008  3400               	retlw	0
   312  0009                     __end_of__stringtab:
   313  0009                     STR_2:
   314  0009  3447               	retlw	71	;'G'
   315  000A  3452               	retlw	82	;'R'
   316  000B  3441               	retlw	65	;'A'
   317  000C  3443               	retlw	67	;'C'
   318  000D  3449               	retlw	73	;'I'
   319  000E  3441               	retlw	65	;'A'
   320  000F  3453               	retlw	83	;'S'
   321  0010  3420               	retlw	32	;' '
   322  0011  3442               	retlw	66	;'B'
   323  0012  3441               	retlw	65	;'A'
   324  0013  3442               	retlw	66	;'B'
   325  0014  3459               	retlw	89	;'Y'
   326  0015  3400               	retlw	0
   327  0016                     STR_3:
   328  0016  3444               	retlw	68	;'D'
   329  0017  3465               	retlw	101	;'e'
   330  0018  3476               	retlw	118	;'v'
   331  0019  3465               	retlw	101	;'e'
   332  001A  346C               	retlw	108	;'l'
   333  001B  346F               	retlw	111	;'o'
   334  001C  3470               	retlw	112	;'p'
   335  001D  3465               	retlw	101	;'e'
   336  001E  3464               	retlw	100	;'d'
   337  001F  3420               	retlw	32	;' '
   338  0020  3442               	retlw	66	;'B'
   339  0021  3479               	retlw	121	;'y'
   340  0022  3400               	retlw	0
   341  0023                     STR_4:
   342  0023  3465               	retlw	101	;'e'
   343  0024  346C               	retlw	108	;'l'
   344  0025  3465               	retlw	101	;'e'
   345  0026  3463               	retlw	99	;'c'
   346  0027  3474               	retlw	116	;'t'
   347  0028  3472               	retlw	114	;'r'
   348  0029  346F               	retlw	111	;'o'
   349  002A  3453               	retlw	83	;'S'
   350  002B  346F               	retlw	111	;'o'
   351  002C  346D               	retlw	109	;'m'
   352  002D  3465               	retlw	101	;'e'
   353  002E  3400               	retlw	0
   354  002F                     STR_1:
   355  002F  3454               	retlw	84	;'T'
   356  0030  3445               	retlw	69	;'E'
   357  0031  3420               	retlw	32	;' '
   358  0032  3441               	retlw	65	;'A'
   359  0033  344D               	retlw	77	;'M'
   360  0034  344F               	retlw	79	;'O'
   361  0035  3400               	retlw	0
   362                           
   363                           	psect	cinit
   364  07FC                     start_initialization:	
   365                           ; #config settings
   366                           
   367  07FC                     __initialization:
   368  07FC                     end_of_initialization:	
   369                           ;End of C runtime variable initialization code
   370                           
   371  07FC                     __end_of__initialization:
   372  07FC  0183               	clrf	3
   373  07FD  120A  118A  2F21   	ljmp	_main	;jump to C main() function
   374                           
   375                           	psect	cstackCOMMON
   376  0070                     __pcstackCOMMON:
   377  0070                     ?_Lcd_Init:
   378  0070                     ?_Lcd_Clear:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_Lcd_Write_String:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_Lcd_Shift_Left:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_Lcd_Shift_Right:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_Lcd_Write_Char:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_setup:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ??_setup:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_main:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_Lcd_Port:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ??_Lcd_Port:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_Lcd_Cmd:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     Lcd_Port@a:	
   412                           ; 1 bytes @ 0x0
   413                           
   414                           
   415                           ; 1 bytes @ 0x0
   416  0070                     	ds	1
   417  0071                     ??_Lcd_Write_Char:
   418  0071                     ??_Lcd_Cmd:	
   419                           ; 1 bytes @ 0x1
   420                           
   421                           
   422                           ; 1 bytes @ 0x1
   423  0071                     	ds	2
   424  0073                     Lcd_Cmd@a:
   425  0073                     Lcd_Write_Char@y:	
   426                           ; 1 bytes @ 0x3
   427                           
   428                           
   429                           ; 1 bytes @ 0x3
   430  0073                     	ds	1
   431  0074                     ??_Lcd_Init:
   432  0074                     ??_Lcd_Clear:	
   433                           ; 1 bytes @ 0x4
   434                           
   435  0074                     ?_Lcd_Set_Cursor:	
   436                           ; 1 bytes @ 0x4
   437                           
   438  0074                     ??_Lcd_Shift_Left:	
   439                           ; 1 bytes @ 0x4
   440                           
   441  0074                     ??_Lcd_Shift_Right:	
   442                           ; 1 bytes @ 0x4
   443                           
   444  0074                     Lcd_Set_Cursor@b:	
   445                           ; 1 bytes @ 0x4
   446                           
   447  0074                     Lcd_Write_Char@a:	
   448                           ; 1 bytes @ 0x4
   449                           
   450                           
   451                           ; 1 bytes @ 0x4
   452  0074                     	ds	1
   453  0075                     ??_Lcd_Set_Cursor:
   454  0075                     ??_Lcd_Write_String:	
   455                           ; 1 bytes @ 0x5
   456                           
   457  0075                     Lcd_Write_String@i:	
   458                           ; 1 bytes @ 0x5
   459                           
   460                           
   461                           ; 2 bytes @ 0x5
   462  0075                     	ds	1
   463  0076                     Lcd_Set_Cursor@a:
   464                           
   465                           ; 1 bytes @ 0x6
   466  0076                     	ds	1
   467  0077                     Lcd_Set_Cursor@temp:
   468  0077                     Lcd_Write_String@a:	
   469                           ; 1 bytes @ 0x7
   470                           
   471                           
   472                           ; 1 bytes @ 0x7
   473  0077                     	ds	1
   474  0078                     ??_main:
   475                           
   476                           ; 1 bytes @ 0x8
   477  0078                     	ds	3
   478  007B                     main@a:
   479                           
   480                           ; 2 bytes @ 0xB
   481  007B                     	ds	2
   482                           
   483                           	psect	maintext
   484  0721                     __pmaintext:	
   485 ;;
   486 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   487 ;;
   488 ;; *************** function _main *****************
   489 ;; Defined at:
   490 ;;		line 61 in file "main.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;		None
   493 ;; Auto vars:     Size  Location     Type
   494 ;;  a               2   11[COMMON] unsigned int 
   495 ;; Return value:  Size  Location     Type
   496 ;;                  1    wreg      void 
   497 ;; Registers used:
   498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   499 ;; Tracked objects:
   500 ;;		On entry : B00/0
   501 ;;		On exit  : 0/0
   502 ;;		Unchanged: 0/0
   503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   504 ;;      Params:         0       0       0       0       0
   505 ;;      Locals:         2       0       0       0       0
   506 ;;      Temps:          3       0       0       0       0
   507 ;;      Totals:         5       0       0       0       0
   508 ;;Total ram usage:        5 bytes
   509 ;; Hardware stack levels required when called:    3
   510 ;; This function calls:
   511 ;;		_Lcd_Clear
   512 ;;		_Lcd_Init
   513 ;;		_Lcd_Set_Cursor
   514 ;;		_Lcd_Shift_Left
   515 ;;		_Lcd_Shift_Right
   516 ;;		_Lcd_Write_Char
   517 ;;		_Lcd_Write_String
   518 ;;		_setup
   519 ;; This function is called by:
   520 ;;		Startup code after reset
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           
   525                           ;psect for function _main
   526  0721                     _main:
   527  0721                     l812:	
   528                           ;incstack = 0
   529                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   530                           
   531                           
   532                           ;main.c: 62:     unsigned int a;;main.c: 63:     setup();
   533  0721  120A  118A  2624  120A  118A  	fcall	_setup
   534  0726                     l814:
   535                           
   536                           ;main.c: 66:     Lcd_Init();
   537  0726  120A  118A  26DA  120A  118A  	fcall	_Lcd_Init
   538  072B                     l816:
   539                           
   540                           ;main.c: 69:         Lcd_Clear();
   541  072B  120A  118A  2630  120A  118A  	fcall	_Lcd_Clear
   542  0730                     l818:
   543                           
   544                           ;main.c: 71:         Lcd_Set_Cursor(1, 1);
   545  0730  01F4               	clrf	Lcd_Set_Cursor@b
   546  0731  0AF4               	incf	Lcd_Set_Cursor@b,f
   547  0732  3001               	movlw	1
   548  0733  120A  118A  2691  120A  118A  	fcall	_Lcd_Set_Cursor
   549  0738                     l820:
   550                           
   551                           ;main.c: 72:         Lcd_Write_String("TE AMO");
   552  0738  3027               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   553  0739  120A  118A  26B5  120A  118A  	fcall	_Lcd_Write_String
   554  073E                     l822:
   555                           
   556                           ;main.c: 75:         Lcd_Set_Cursor(2, 1);
   557  073E  01F4               	clrf	Lcd_Set_Cursor@b
   558  073F  0AF4               	incf	Lcd_Set_Cursor@b,f
   559  0740  3002               	movlw	2
   560  0741  120A  118A  2691  120A  118A  	fcall	_Lcd_Set_Cursor
   561  0746                     l824:
   562                           
   563                           ;main.c: 76:         Lcd_Write_String("GRACIAS BABY");
   564  0746  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   565  0747  120A  118A  26B5  120A  118A  	fcall	_Lcd_Write_String
   566  074C                     l826:
   567                           
   568                           ;main.c: 77:         _delay((unsigned long)((2000)*(8000000/4000.0)));
   569  074C  3015               	movlw	21
   570  074D  00FA               	movwf	??_main+2
   571  074E  304B               	movlw	75
   572  074F  00F9               	movwf	??_main+1
   573  0750  30BE               	movlw	190
   574  0751  00F8               	movwf	??_main
   575  0752                     u117:
   576  0752  0BF8               	decfsz	??_main,f
   577  0753  2F52               	goto	u117
   578  0754  0BF9               	decfsz	??_main+1,f
   579  0755  2F52               	goto	u117
   580  0756  0BFA               	decfsz	??_main+2,f
   581  0757  2F52               	goto	u117
   582  0758  0000               	nop
   583                           
   584                           ;main.c: 78:         Lcd_Clear();
   585  0759  120A  118A  2630  120A  118A  	fcall	_Lcd_Clear
   586                           
   587                           ;main.c: 81:         Lcd_Set_Cursor(1, 1);
   588  075E  01F4               	clrf	Lcd_Set_Cursor@b
   589  075F  0AF4               	incf	Lcd_Set_Cursor@b,f
   590  0760  3001               	movlw	1
   591  0761  120A  118A  2691  120A  118A  	fcall	_Lcd_Set_Cursor
   592  0766                     l828:
   593                           
   594                           ;main.c: 82:         Lcd_Write_String("Developed By");
   595  0766  300E               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   596  0767  120A  118A  26B5  120A  118A  	fcall	_Lcd_Write_String
   597  076C                     l830:
   598                           
   599                           ;main.c: 83:         Lcd_Set_Cursor(2, 1);
   600  076C  01F4               	clrf	Lcd_Set_Cursor@b
   601  076D  0AF4               	incf	Lcd_Set_Cursor@b,f
   602  076E  3002               	movlw	2
   603  076F  120A  118A  2691  120A  118A  	fcall	_Lcd_Set_Cursor
   604                           
   605                           ;main.c: 84:         Lcd_Write_String("electroSome");
   606  0774  301B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   607  0775  120A  118A  26B5  120A  118A  	fcall	_Lcd_Write_String
   608  077A                     l832:
   609                           
   610                           ;main.c: 85:         _delay((unsigned long)((2000)*(8000000/4000.0)));
   611  077A  3015               	movlw	21
   612  077B  00FA               	movwf	??_main+2
   613  077C  304B               	movlw	75
   614  077D  00F9               	movwf	??_main+1
   615  077E  30BE               	movlw	190
   616  077F  00F8               	movwf	??_main
   617  0780                     u127:
   618  0780  0BF8               	decfsz	??_main,f
   619  0781  2F80               	goto	u127
   620  0782  0BF9               	decfsz	??_main+1,f
   621  0783  2F80               	goto	u127
   622  0784  0BFA               	decfsz	??_main+2,f
   623  0785  2F80               	goto	u127
   624  0786  0000               	nop
   625  0787                     l834:
   626                           
   627                           ;main.c: 86:         Lcd_Clear();
   628  0787  120A  118A  2630  120A  118A  	fcall	_Lcd_Clear
   629  078C                     l836:
   630                           
   631                           ;main.c: 93:         for (a = 0; a < 15; a++) {
   632  078C  01FB               	clrf	main@a
   633  078D  01FC               	clrf	main@a+1
   634  078E                     l842:
   635                           
   636                           ;main.c: 94:             _delay((unsigned long)((300)*(8000000/4000.0)));
   637  078E  3004               	movlw	4
   638  078F  00FA               	movwf	??_main+2
   639  0790  300C               	movlw	12
   640  0791  00F9               	movwf	??_main+1
   641  0792  3033               	movlw	51
   642  0793  00F8               	movwf	??_main
   643  0794                     u137:
   644  0794  0BF8               	decfsz	??_main,f
   645  0795  2F94               	goto	u137
   646  0796  0BF9               	decfsz	??_main+1,f
   647  0797  2F94               	goto	u137
   648  0798  0BFA               	decfsz	??_main+2,f
   649  0799  2F94               	goto	u137
   650  079A  2F9B               	nop2
   651  079B                     l844:
   652                           
   653                           ;main.c: 95:             Lcd_Shift_Left();
   654  079B  120A  118A  263D  120A  118A  	fcall	_Lcd_Shift_Left
   655  07A0                     l846:
   656                           
   657                           ;main.c: 96:         }
   658  07A0  3001               	movlw	1
   659  07A1  07FB               	addwf	main@a,f
   660  07A2  1803               	skipnc
   661  07A3  0AFC               	incf	main@a+1,f
   662  07A4  3000               	movlw	0
   663  07A5  07FC               	addwf	main@a+1,f
   664  07A6                     l848:
   665  07A6  3000               	movlw	0
   666  07A7  027C               	subwf	main@a+1,w
   667  07A8  300F               	movlw	15
   668  07A9  1903               	skipnz
   669  07AA  027B               	subwf	main@a,w
   670  07AB  1C03               	skipc
   671  07AC  2FAE               	goto	u91
   672  07AD  2FAF               	goto	u90
   673  07AE                     u91:
   674  07AE  2F8E               	goto	l842
   675  07AF                     u90:
   676  07AF                     l850:
   677                           
   678                           ;main.c: 98:         for (a = 0; a < 15; a++) {
   679  07AF  01FB               	clrf	main@a
   680  07B0  01FC               	clrf	main@a+1
   681  07B1                     l856:
   682                           
   683                           ;main.c: 99:             _delay((unsigned long)((300)*(8000000/4000.0)));
   684  07B1  3004               	movlw	4
   685  07B2  00FA               	movwf	??_main+2
   686  07B3  300C               	movlw	12
   687  07B4  00F9               	movwf	??_main+1
   688  07B5  3033               	movlw	51
   689  07B6  00F8               	movwf	??_main
   690  07B7                     u147:
   691  07B7  0BF8               	decfsz	??_main,f
   692  07B8  2FB7               	goto	u147
   693  07B9  0BF9               	decfsz	??_main+1,f
   694  07BA  2FB7               	goto	u147
   695  07BB  0BFA               	decfsz	??_main+2,f
   696  07BC  2FB7               	goto	u147
   697  07BD  2FBE               	nop2
   698  07BE                     l858:
   699                           
   700                           ;main.c: 100:             Lcd_Shift_Right();
   701  07BE  120A  118A  264A  120A  118A  	fcall	_Lcd_Shift_Right
   702  07C3                     l860:
   703                           
   704                           ;main.c: 101:         }
   705  07C3  3001               	movlw	1
   706  07C4  07FB               	addwf	main@a,f
   707  07C5  1803               	skipnc
   708  07C6  0AFC               	incf	main@a+1,f
   709  07C7  3000               	movlw	0
   710  07C8  07FC               	addwf	main@a+1,f
   711  07C9                     l862:
   712  07C9  3000               	movlw	0
   713  07CA  027C               	subwf	main@a+1,w
   714  07CB  300F               	movlw	15
   715  07CC  1903               	skipnz
   716  07CD  027B               	subwf	main@a,w
   717  07CE  1C03               	skipc
   718  07CF  2FD1               	goto	u101
   719  07D0  2FD2               	goto	u100
   720  07D1                     u101:
   721  07D1  2FB1               	goto	l856
   722  07D2                     u100:
   723  07D2                     l864:
   724                           
   725                           ;main.c: 103:         Lcd_Clear();
   726  07D2  120A  118A  2630  120A  118A  	fcall	_Lcd_Clear
   727                           
   728                           ;main.c: 104:         Lcd_Set_Cursor(2, 1);
   729  07D7  01F4               	clrf	Lcd_Set_Cursor@b
   730  07D8  0AF4               	incf	Lcd_Set_Cursor@b,f
   731  07D9  3002               	movlw	2
   732  07DA  120A  118A  2691  120A  118A  	fcall	_Lcd_Set_Cursor
   733                           
   734                           ;main.c: 105:         Lcd_Write_Char('e');
   735  07DF  3065               	movlw	101
   736  07E0  120A  118A  2671  120A  118A  	fcall	_Lcd_Write_Char
   737                           
   738                           ;main.c: 106:         Lcd_Write_Char('S');
   739  07E5  3053               	movlw	83
   740  07E6  120A  118A  2671  120A  118A  	fcall	_Lcd_Write_Char
   741  07EB                     l866:
   742                           
   743                           ;main.c: 107:         _delay((unsigned long)((2000)*(8000000/4000.0)));
   744  07EB  3015               	movlw	21
   745  07EC  00FA               	movwf	??_main+2
   746  07ED  304B               	movlw	75
   747  07EE  00F9               	movwf	??_main+1
   748  07EF  30BE               	movlw	190
   749  07F0  00F8               	movwf	??_main
   750  07F1                     u157:
   751  07F1  0BF8               	decfsz	??_main,f
   752  07F2  2FF1               	goto	u157
   753  07F3  0BF9               	decfsz	??_main+1,f
   754  07F4  2FF1               	goto	u157
   755  07F5  0BFA               	decfsz	??_main+2,f
   756  07F6  2FF1               	goto	u157
   757  07F7  0000               	nop
   758  07F8  2F2B               	goto	l816
   759  07F9  120A  118A  2800   	ljmp	start
   760  07FC                     __end_of_main:
   761                           
   762                           	psect	text1
   763  0624                     __ptext1:	
   764 ;; *************** function _setup *****************
   765 ;; Defined at:
   766 ;;		line 39 in file "main.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;		None
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		status,2
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   780 ;;      Params:         0       0       0       0       0
   781 ;;      Locals:         0       0       0       0       0
   782 ;;      Temps:          0       0       0       0       0
   783 ;;      Totals:         0       0       0       0       0
   784 ;;Total ram usage:        0 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; This function calls:
   787 ;;		Nothing
   788 ;; This function is called by:
   789 ;;		_main
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           
   794                           ;psect for function _setup
   795  0624                     _setup:
   796  0624                     l698:	
   797                           ;incstack = 0
   798                           ; Regs used in _setup: [status,2]
   799                           
   800                           
   801                           ;main.c: 40:     ANSEL = 0;
   802  0624  1683               	bsf	3,5	;RP0=1, select bank3
   803  0625  1703               	bsf	3,6	;RP1=1, select bank3
   804  0626  0188               	clrf	8	;volatile
   805                           
   806                           ;main.c: 41:     ANSELH = 0;
   807  0627  0189               	clrf	9	;volatile
   808                           
   809                           ;main.c: 42:     TRISC = 0b00000000;
   810  0628  1683               	bsf	3,5	;RP0=1, select bank1
   811  0629  1303               	bcf	3,6	;RP1=0, select bank1
   812  062A  0187               	clrf	7	;volatile
   813                           
   814                           ;main.c: 43:     TRISD = 0b00000000;
   815  062B  0188               	clrf	8	;volatile
   816                           
   817                           ;main.c: 47:     PORTA = 0;
   818  062C  1283               	bcf	3,5	;RP0=0, select bank0
   819  062D  1303               	bcf	3,6	;RP1=0, select bank0
   820  062E  0185               	clrf	5	;volatile
   821  062F                     l29:
   822  062F  0008               	return
   823  0630                     __end_of_setup:
   824                           
   825                           	psect	text2
   826  06B5                     __ptext2:	
   827 ;; *************** function _Lcd_Write_String *****************
   828 ;; Defined at:
   829 ;;		line 130 in file "LCD.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;  a               1    wreg     PTR unsigned char 
   832 ;;		 -> STR_4(12), STR_3(13), STR_2(13), STR_1(7), 
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  a               1    7[COMMON] PTR unsigned char 
   835 ;;		 -> STR_4(12), STR_3(13), STR_2(13), STR_1(7), 
   836 ;;  i               2    5[COMMON] int 
   837 ;; Return value:  Size  Location     Type
   838 ;;                  1    wreg      void 
   839 ;; Registers used:
   840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   846 ;;      Params:         0       0       0       0       0
   847 ;;      Locals:         3       0       0       0       0
   848 ;;      Temps:          0       0       0       0       0
   849 ;;      Totals:         3       0       0       0       0
   850 ;;Total ram usage:        3 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    2
   853 ;; This function calls:
   854 ;;		_Lcd_Write_Char
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           
   861                           ;psect for function _Lcd_Write_String
   862  06B5                     _Lcd_Write_String:
   863                           
   864                           ;incstack = 0
   865                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   866                           ;Lcd_Write_String@a stored from wreg
   867  06B5  00F7               	movwf	Lcd_Write_String@a
   868  06B6                     l804:
   869                           
   870                           ;LCD.c: 130: void Lcd_Write_String(char *a);LCD.c: 131: {;LCD.c: 132:  int i;;LCD.c: 133
      +                          :  for(i=0;a[i]!='\0';i++)
   871  06B6  01F5               	clrf	Lcd_Write_String@i
   872  06B7  01F6               	clrf	Lcd_Write_String@i+1
   873  06B8  2ECC               	goto	l810
   874  06B9                     l806:
   875                           
   876                           ;LCD.c: 134:     Lcd_Write_Char(a[i]);
   877  06B9  0875               	movf	Lcd_Write_String@i,w
   878  06BA  0777               	addwf	Lcd_Write_String@a,w
   879  06BB  0084               	movwf	4
   880  06BC  120A  118A  2003  120A  118A  	fcall	stringdir
   881  06C1  120A  118A  2671  120A  118A  	fcall	_Lcd_Write_Char
   882  06C6                     l808:
   883  06C6  3001               	movlw	1
   884  06C7  07F5               	addwf	Lcd_Write_String@i,f
   885  06C8  1803               	skipnc
   886  06C9  0AF6               	incf	Lcd_Write_String@i+1,f
   887  06CA  3000               	movlw	0
   888  06CB  07F6               	addwf	Lcd_Write_String@i+1,f
   889  06CC                     l810:
   890  06CC  0875               	movf	Lcd_Write_String@i,w
   891  06CD  0777               	addwf	Lcd_Write_String@a,w
   892  06CE  0084               	movwf	4
   893  06CF  120A  118A  2003  120A  118A  	fcall	stringdir
   894  06D4  3A00               	xorlw	0
   895  06D5  1D03               	skipz
   896  06D6  2ED8               	goto	u81
   897  06D7  2ED9               	goto	u80
   898  06D8                     u81:
   899  06D8  2EB9               	goto	l806
   900  06D9                     u80:
   901  06D9                     l74:
   902  06D9  0008               	return
   903  06DA                     __end_of_Lcd_Write_String:
   904                           
   905                           	psect	text3
   906  0671                     __ptext3:	
   907 ;; *************** function _Lcd_Write_Char *****************
   908 ;; Defined at:
   909 ;;		line 114 in file "LCD.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;  a               1    wreg     unsigned char 
   912 ;; Auto vars:     Size  Location     Type
   913 ;;  a               1    4[COMMON] unsigned char 
   914 ;;  y               1    3[COMMON] unsigned char 
   915 ;;  temp            1    0        unsigned char 
   916 ;; Return value:  Size  Location     Type
   917 ;;                  1    wreg      void 
   918 ;; Registers used:
   919 ;;		wreg, status,2, status,0, pclath, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   925 ;;      Params:         0       0       0       0       0
   926 ;;      Locals:         3       0       0       0       0
   927 ;;      Temps:          1       0       0       0       0
   928 ;;      Totals:         4       0       0       0       0
   929 ;;Total ram usage:        4 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; Hardware stack levels required when called:    1
   932 ;; This function calls:
   933 ;;		_Lcd_Port
   934 ;; This function is called by:
   935 ;;		_main
   936 ;;		_Lcd_Write_String
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           
   941                           ;psect for function _Lcd_Write_Char
   942  0671                     _Lcd_Write_Char:
   943                           
   944                           ;incstack = 0
   945                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   946                           ;Lcd_Write_Char@a stored from wreg
   947  0671  00F4               	movwf	Lcd_Write_Char@a
   948  0672                     l674:
   949                           
   950                           ;LCD.c: 118:    y = a&0xF0;
   951  0672  0874               	movf	Lcd_Write_Char@a,w
   952  0673  39F0               	andlw	240
   953  0674  00F1               	movwf	??_Lcd_Write_Char
   954  0675  0871               	movf	??_Lcd_Write_Char,w
   955  0676  00F3               	movwf	Lcd_Write_Char@y
   956  0677                     l676:
   957                           
   958                           ;LCD.c: 119:    PORTDbits.RD2 = 1;
   959  0677  1283               	bcf	3,5	;RP0=0, select bank0
   960  0678  1303               	bcf	3,6	;RP1=0, select bank0
   961  0679  1508               	bsf	8,2	;volatile
   962  067A                     l678:
   963                           
   964                           ;LCD.c: 120:    Lcd_Port(a);
   965  067A  0874               	movf	Lcd_Write_Char@a,w
   966  067B  120A  118A  261E  120A  118A  	fcall	_Lcd_Port
   967  0680                     l680:
   968                           
   969                           ;LCD.c: 121:    PORTDbits.RD3 = 1;
   970  0680  1283               	bcf	3,5	;RP0=0, select bank0
   971  0681  1303               	bcf	3,6	;RP1=0, select bank0
   972  0682  1588               	bsf	8,3	;volatile
   973  0683                     l682:
   974                           
   975                           ;LCD.c: 122:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   976  0683  301A               	movlw	26
   977  0684  00F1               	movwf	??_Lcd_Write_Char
   978  0685                     u167:
   979  0685  0BF1               	decfsz	??_Lcd_Write_Char,f
   980  0686  2E85               	goto	u167
   981  0687  0000               	nop
   982  0688                     l684:
   983                           
   984                           ;LCD.c: 123:    PORTDbits.RD3 = 0;
   985  0688  1283               	bcf	3,5	;RP0=0, select bank0
   986  0689  1303               	bcf	3,6	;RP1=0, select bank0
   987  068A  1188               	bcf	8,3	;volatile
   988  068B                     l686:
   989                           
   990                           ;LCD.c: 126:    _delay((unsigned long)((40)*(8000000/4000000.0)));
   991  068B  301A               	movlw	26
   992  068C  00F1               	movwf	??_Lcd_Write_Char
   993  068D                     u177:
   994  068D  0BF1               	decfsz	??_Lcd_Write_Char,f
   995  068E  2E8D               	goto	u177
   996  068F  0000               	nop
   997  0690                     l68:
   998  0690  0008               	return
   999  0691                     __end_of_Lcd_Write_Char:
  1000                           
  1001                           	psect	text4
  1002  064A                     __ptext4:	
  1003 ;; *************** function _Lcd_Shift_Right *****************
  1004 ;; Defined at:
  1005 ;;		line 137 in file "LCD.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;		None
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;		None
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, status,2, status,0, pclath, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1019 ;;      Params:         0       0       0       0       0
  1020 ;;      Locals:         0       0       0       0       0
  1021 ;;      Temps:          0       0       0       0       0
  1022 ;;      Totals:         0       0       0       0       0
  1023 ;;Total ram usage:        0 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    2
  1026 ;; This function calls:
  1027 ;;		_Lcd_Cmd
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           
  1034                           ;psect for function _Lcd_Shift_Right
  1035  064A                     _Lcd_Shift_Right:
  1036  064A                     l734:	
  1037                           ;incstack = 0
  1038                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  1039                           
  1040                           
  1041                           ;LCD.c: 139:  Lcd_Cmd(0x01);
  1042  064A  3001               	movlw	1
  1043  064B  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1044                           
  1045                           ;LCD.c: 140:  Lcd_Cmd(0x0C);
  1046  0650  300C               	movlw	12
  1047  0651  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1048  0656                     l77:
  1049  0656  0008               	return
  1050  0657                     __end_of_Lcd_Shift_Right:
  1051                           
  1052                           	psect	text5
  1053  063D                     __ptext5:	
  1054 ;; *************** function _Lcd_Shift_Left *****************
  1055 ;; Defined at:
  1056 ;;		line 143 in file "LCD.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;		None
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, status,2, status,0, pclath, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1070 ;;      Params:         0       0       0       0       0
  1071 ;;      Locals:         0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0
  1073 ;;      Totals:         0       0       0       0       0
  1074 ;;Total ram usage:        0 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    2
  1077 ;; This function calls:
  1078 ;;		_Lcd_Cmd
  1079 ;; This function is called by:
  1080 ;;		_main
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           
  1085                           ;psect for function _Lcd_Shift_Left
  1086  063D                     _Lcd_Shift_Left:
  1087  063D                     l732:	
  1088                           ;incstack = 0
  1089                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  1090                           
  1091                           
  1092                           ;LCD.c: 145:  Lcd_Cmd(0x01);
  1093  063D  3001               	movlw	1
  1094  063E  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1095                           
  1096                           ;LCD.c: 146:  Lcd_Cmd(0x08);
  1097  0643  3008               	movlw	8
  1098  0644  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1099  0649                     l80:
  1100  0649  0008               	return
  1101  064A                     __end_of_Lcd_Shift_Left:
  1102                           
  1103                           	psect	text6
  1104  0691                     __ptext6:	
  1105 ;; *************** function _Lcd_Set_Cursor *****************
  1106 ;; Defined at:
  1107 ;;		line 65 in file "LCD.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  a               1    wreg     unsigned char 
  1110 ;;  b               1    4[COMMON] unsigned char 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  a               1    6[COMMON] unsigned char 
  1113 ;;  temp            1    7[COMMON] unsigned char 
  1114 ;;  y               1    0        unsigned char 
  1115 ;;  z               1    0        unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg, status,2, status,0, pclath, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1125 ;;      Params:         1       0       0       0       0
  1126 ;;      Locals:         2       0       0       0       0
  1127 ;;      Temps:          1       0       0       0       0
  1128 ;;      Totals:         4       0       0       0       0
  1129 ;;Total ram usage:        4 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    2
  1132 ;; This function calls:
  1133 ;;		_Lcd_Cmd
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           
  1140                           ;psect for function _Lcd_Set_Cursor
  1141  0691                     _Lcd_Set_Cursor:
  1142                           
  1143                           ;incstack = 0
  1144                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1145                           ;Lcd_Set_Cursor@a stored from wreg
  1146  0691  00F6               	movwf	Lcd_Set_Cursor@a
  1147  0692                     l792:
  1148                           
  1149                           ;LCD.c: 65: void Lcd_Set_Cursor(char a, char b);LCD.c: 66: {;LCD.c: 67:  char temp,z,y;;
      +                          LCD.c: 68:  if(a == 1)
  1150  0692  0376               	decf	Lcd_Set_Cursor@a,w
  1151  0693  1D03               	btfss	3,2
  1152  0694  2E96               	goto	u61
  1153  0695  2E97               	goto	u60
  1154  0696                     u61:
  1155  0696  2EA3               	goto	l798
  1156  0697                     u60:
  1157  0697                     l794:
  1158                           
  1159                           ;LCD.c: 69:  {;LCD.c: 70:    temp = 0x80 + b - 1;
  1160  0697  0874               	movf	Lcd_Set_Cursor@b,w
  1161  0698  3E7F               	addlw	127
  1162  0699  00F5               	movwf	??_Lcd_Set_Cursor
  1163  069A  0875               	movf	??_Lcd_Set_Cursor,w
  1164  069B  00F7               	movwf	Lcd_Set_Cursor@temp
  1165  069C                     l796:
  1166                           
  1167                           ;LCD.c: 75:       Lcd_Cmd(temp);
  1168  069C  0877               	movf	Lcd_Set_Cursor@temp,w
  1169  069D  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1170                           
  1171                           ;LCD.c: 76:  }
  1172  06A2  2EB4               	goto	l62
  1173  06A3                     l798:
  1174  06A3  3002               	movlw	2
  1175  06A4  0676               	xorwf	Lcd_Set_Cursor@a,w
  1176  06A5  1D03               	btfss	3,2
  1177  06A6  2EA8               	goto	u71
  1178  06A7  2EA9               	goto	u70
  1179  06A8                     u71:
  1180  06A8  2EB4               	goto	l62
  1181  06A9                     u70:
  1182  06A9                     l800:
  1183                           
  1184                           ;LCD.c: 78:  {;LCD.c: 79:   temp = 0xC0 + b - 1;
  1185  06A9  0874               	movf	Lcd_Set_Cursor@b,w
  1186  06AA  3EBF               	addlw	191
  1187  06AB  00F5               	movwf	??_Lcd_Set_Cursor
  1188  06AC  0875               	movf	??_Lcd_Set_Cursor,w
  1189  06AD  00F7               	movwf	Lcd_Set_Cursor@temp
  1190  06AE                     l802:
  1191                           
  1192                           ;LCD.c: 84:         Lcd_Cmd(temp);
  1193  06AE  0877               	movf	Lcd_Set_Cursor@temp,w
  1194  06AF  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1195  06B4                     l62:
  1196  06B4  0008               	return
  1197  06B5                     __end_of_Lcd_Set_Cursor:
  1198                           
  1199                           	psect	text7
  1200  06DA                     __ptext7:	
  1201 ;; *************** function _Lcd_Init *****************
  1202 ;; Defined at:
  1203 ;;		line 88 in file "LCD.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1217 ;;      Params:         0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0
  1219 ;;      Temps:          2       0       0       0       0
  1220 ;;      Totals:         2       0       0       0       0
  1221 ;;Total ram usage:        2 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    2
  1224 ;; This function calls:
  1225 ;;		_Lcd_Cmd
  1226 ;;		_Lcd_Port
  1227 ;; This function is called by:
  1228 ;;		_main
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           
  1233                           ;psect for function _Lcd_Init
  1234  06DA                     _Lcd_Init:
  1235  06DA                     l700:	
  1236                           ;incstack = 0
  1237                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1238                           
  1239                           
  1240                           ;LCD.c: 90:   Lcd_Port(0x00);
  1241  06DA  3000               	movlw	0
  1242  06DB  120A  118A  261E  120A  118A  	fcall	_Lcd_Port
  1243  06E0                     l702:
  1244                           
  1245                           ;LCD.c: 91:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1246  06E0  3034               	movlw	52
  1247  06E1  00F5               	movwf	??_Lcd_Init+1
  1248  06E2  30F1               	movlw	241
  1249  06E3  00F4               	movwf	??_Lcd_Init
  1250  06E4                     u187:
  1251  06E4  0BF4               	decfsz	??_Lcd_Init,f
  1252  06E5  2EE4               	goto	u187
  1253  06E6  0BF5               	decfsz	??_Lcd_Init+1,f
  1254  06E7  2EE4               	goto	u187
  1255  06E8  2EE9               	nop2
  1256  06E9                     l704:
  1257                           
  1258                           ;LCD.c: 92:   Lcd_Cmd(0x3F);
  1259  06E9  303F               	movlw	63
  1260  06EA  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1261                           
  1262                           ;LCD.c: 93:  _delay((unsigned long)((10)*(8000000/4000.0)));
  1263  06EF  301A               	movlw	26
  1264  06F0  00F5               	movwf	??_Lcd_Init+1
  1265  06F1  30F8               	movlw	248
  1266  06F2  00F4               	movwf	??_Lcd_Init
  1267  06F3                     u197:
  1268  06F3  0BF4               	decfsz	??_Lcd_Init,f
  1269  06F4  2EF3               	goto	u197
  1270  06F5  0BF5               	decfsz	??_Lcd_Init+1,f
  1271  06F6  2EF3               	goto	u197
  1272  06F7  0000               	nop
  1273  06F8                     l706:
  1274                           
  1275                           ;LCD.c: 94:   Lcd_Cmd(0x3F);
  1276  06F8  303F               	movlw	63
  1277  06F9  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1278  06FE                     l708:
  1279                           
  1280                           ;LCD.c: 95:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1281  06FE  3085               	movlw	133
  1282  06FF  00F4               	movwf	??_Lcd_Init
  1283  0700                     u207:
  1284  0700  0BF4               	decfsz	??_Lcd_Init,f
  1285  0701  2F00               	goto	u207
  1286                           
  1287                           ;LCD.c: 96:   Lcd_Cmd(0x3F);
  1288  0702  303F               	movlw	63
  1289  0703  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1290                           
  1291                           ;LCD.c: 98:   Lcd_Cmd (0x32);
  1292  0708  3032               	movlw	50
  1293  0709  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1294                           
  1295                           ;LCD.c: 99:   Lcd_Cmd (0x38);
  1296  070E  3038               	movlw	56
  1297  070F  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1298                           
  1299                           ;LCD.c: 100:   Lcd_Cmd (0x0C);
  1300  0714  300C               	movlw	12
  1301  0715  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1302                           
  1303                           ;LCD.c: 101:   Lcd_Cmd (0x06);
  1304  071A  3006               	movlw	6
  1305  071B  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1306  0720                     l65:
  1307  0720  0008               	return
  1308  0721                     __end_of_Lcd_Init:
  1309                           
  1310                           	psect	text8
  1311  0630                     __ptext8:	
  1312 ;; *************** function _Lcd_Clear *****************
  1313 ;; Defined at:
  1314 ;;		line 59 in file "LCD.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0, pclath, cstack
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1328 ;;      Params:         0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    2
  1335 ;; This function calls:
  1336 ;;		_Lcd_Cmd
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _Lcd_Clear
  1344  0630                     _Lcd_Clear:
  1345  0630                     l710:	
  1346                           ;incstack = 0
  1347                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1348                           
  1349                           
  1350                           ;LCD.c: 61:  Lcd_Cmd(0);
  1351  0630  3000               	movlw	0
  1352  0631  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1353                           
  1354                           ;LCD.c: 62:  Lcd_Cmd(1);
  1355  0636  3001               	movlw	1
  1356  0637  120A  118A  2657  120A  118A  	fcall	_Lcd_Cmd
  1357  063C                     l56:
  1358  063C  0008               	return
  1359  063D                     __end_of_Lcd_Clear:
  1360                           
  1361                           	psect	text9
  1362  0657                     __ptext9:	
  1363 ;; *************** function _Lcd_Cmd *****************
  1364 ;; Defined at:
  1365 ;;		line 50 in file "LCD.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  a               1    wreg     unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  a               1    3[COMMON] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2, status,0, pclath, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1379 ;;      Params:         0       0       0       0       0
  1380 ;;      Locals:         1       0       0       0       0
  1381 ;;      Temps:          2       0       0       0       0
  1382 ;;      Totals:         3       0       0       0       0
  1383 ;;Total ram usage:        3 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    1
  1386 ;; This function calls:
  1387 ;;		_Lcd_Port
  1388 ;; This function is called by:
  1389 ;;		_Lcd_Clear
  1390 ;;		_Lcd_Set_Cursor
  1391 ;;		_Lcd_Init
  1392 ;;		_Lcd_Shift_Right
  1393 ;;		_Lcd_Shift_Left
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           
  1398                           ;psect for function _Lcd_Cmd
  1399  0657                     _Lcd_Cmd:
  1400                           
  1401                           ;incstack = 0
  1402                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1403                           ;Lcd_Cmd@a stored from wreg
  1404  0657  00F3               	movwf	Lcd_Cmd@a
  1405  0658                     l688:
  1406                           
  1407                           ;LCD.c: 50: void Lcd_Cmd(char a);LCD.c: 51: {;LCD.c: 52:  PORTDbits.RD2 = 0;
  1408  0658  1283               	bcf	3,5	;RP0=0, select bank0
  1409  0659  1303               	bcf	3,6	;RP1=0, select bank0
  1410  065A  1108               	bcf	8,2	;volatile
  1411  065B                     l690:
  1412                           
  1413                           ;LCD.c: 53:  Lcd_Port(a);
  1414  065B  0873               	movf	Lcd_Cmd@a,w
  1415  065C  120A  118A  261E  120A  118A  	fcall	_Lcd_Port
  1416  0661                     l692:
  1417                           
  1418                           ;LCD.c: 54:  PORTDbits.RD3 = 1;
  1419  0661  1283               	bcf	3,5	;RP0=0, select bank0
  1420  0662  1303               	bcf	3,6	;RP1=0, select bank0
  1421  0663  1588               	bsf	8,3	;volatile
  1422  0664                     l694:
  1423                           
  1424                           ;LCD.c: 55:         _delay((unsigned long)((4)*(8000000/4000.0)));
  1425  0664  300B               	movlw	11
  1426  0665  00F2               	movwf	??_Lcd_Cmd+1
  1427  0666  3062               	movlw	98
  1428  0667  00F1               	movwf	??_Lcd_Cmd
  1429  0668                     u217:
  1430  0668  0BF1               	decfsz	??_Lcd_Cmd,f
  1431  0669  2E68               	goto	u217
  1432  066A  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1433  066B  2E68               	goto	u217
  1434  066C  0000               	nop
  1435  066D                     l696:
  1436                           
  1437                           ;LCD.c: 56:         PORTDbits.RD3 = 0;
  1438  066D  1283               	bcf	3,5	;RP0=0, select bank0
  1439  066E  1303               	bcf	3,6	;RP1=0, select bank0
  1440  066F  1188               	bcf	8,3	;volatile
  1441  0670                     l53:
  1442  0670  0008               	return
  1443  0671                     __end_of_Lcd_Cmd:
  1444                           
  1445                           	psect	text10
  1446  061E                     __ptext10:	
  1447 ;; *************** function _Lcd_Port *****************
  1448 ;; Defined at:
  1449 ;;		line 43 in file "LCD.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  a               1    wreg     unsigned char 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  a               1    0[COMMON] unsigned char 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1463 ;;      Params:         0       0       0       0       0
  1464 ;;      Locals:         1       0       0       0       0
  1465 ;;      Temps:          0       0       0       0       0
  1466 ;;      Totals:         1       0       0       0       0
  1467 ;;Total ram usage:        1 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; This function calls:
  1470 ;;		Nothing
  1471 ;; This function is called by:
  1472 ;;		_Lcd_Cmd
  1473 ;;		_Lcd_Init
  1474 ;;		_Lcd_Write_Char
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           
  1479                           ;psect for function _Lcd_Port
  1480  061E                     _Lcd_Port:
  1481                           
  1482                           ;incstack = 0
  1483                           ; Regs used in _Lcd_Port: [wreg]
  1484                           ;Lcd_Port@a stored from wreg
  1485  061E  00F0               	movwf	Lcd_Port@a
  1486  061F                     l672:
  1487                           
  1488                           ;LCD.c: 43: void Lcd_Port(char a);LCD.c: 44: {;LCD.c: 46:     PORTC = a;
  1489  061F  0870               	movf	Lcd_Port@a,w
  1490  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0622  0087               	movwf	7	;volatile
  1493  0623                     l50:
  1494  0623  0008               	return
  1495  0624                     __end_of_Lcd_Port:
  1496  007E                     btemp	set	126	;btemp
  1497  007E                     wtemp0	set	126
  1498                           
  1499                           	psect	config
  1500                           
  1501                           ;Config register CONFIG1 @ 0x2007
  1502                           ;	Oscillator Selection bits
  1503                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
  1504                           ;	Watchdog Timer Enable bit
  1505                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1506                           ;	Power-up Timer Enable bit
  1507                           ;	PWRTE = OFF, PWRT disabled
  1508                           ;	RE3/MCLR pin function select bit
  1509                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1510                           ;	Code Protection bit
  1511                           ;	CP = OFF, Program memory code protection is disabled
  1512                           ;	Data Code Protection bit
  1513                           ;	CPD = OFF, Data memory code protection is disabled
  1514                           ;	Brown Out Reset Selection bits
  1515                           ;	BOREN = OFF, BOR disabled
  1516                           ;	Internal External Switchover bit
  1517                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1518                           ;	Fail-Safe Clock Monitor Enabled bit
  1519                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1520                           ;	Low Voltage Programming Enable bit
  1521                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1522                           ;	In-Circuit Debugger Mode bit
  1523                           ;	DEBUG = 0x1, unprogrammed default
  1524  2007                     	org	8199
  1525  2007  20D5               	dw	8405
  1526                           
  1527                           ;Config register CONFIG2 @ 0x2008
  1528                           ;	Brown-out Reset Selection bit
  1529                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1530                           ;	Flash Program Memory Self Write Enable bits
  1531                           ;	WRT = OFF, Write protection off
  1532  2008                     	org	8200
  1533  2008  3FFF               	dw	16383

Data Sizes:
    Strings     45
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 13
		 -> STR_4(CODE[12]), STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1113
                                              8 COMMON     5     5      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     282
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0      60
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0      30
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0      30
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     544
                                              4 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      45
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      30
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      30
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Feb 07 18:50:35 2021

                        pc 0002                         l50 0623                         l53 0670  
                       l29 062F                         l62 06B4                         l56 063C  
                       l80 0649                         l65 0720                         l74 06D9  
                       l68 0690                         l77 0656                         u60 0697  
                       u61 0696                         u70 06A9                         u71 06A8  
                       u80 06D9                         u81 06D8                         u90 07AF  
                       u91 07AE                         fsr 0004                        l700 06DA  
                      l710 0630                        l702 06E0                        l704 06E9  
                      l800 06A9                        l706 06F8                        l802 06AE  
                      l810 06CC                        l708 06FE                        l732 063D  
                      l804 06B6                        l820 0738                        l812 0721  
                      l734 064A                        l806 06B9                        l830 076C  
                      l822 073E                        l814 0726                        l672 061F  
                      l680 0680                        l808 06C6                        l832 077A  
                      l824 0746                        l816 072B                        l690 065B  
                      l682 0683                        l674 0672                        l850 07AF  
                      l842 078E                        l834 0787                        l826 074C  
                      l818 0730                        l692 0661                        l684 0688  
                      l676 0677                        l860 07C3                        l844 079B  
                      l836 078C                        l828 0766                        l694 0664  
                      l686 068B                        l678 067A                        l862 07C9  
                      l846 07A0                        l696 066D                        l688 0658  
                      l792 0692                        l864 07D2                        l856 07B1  
                      l848 07A6                        l794 0697                        l698 0624  
                      l866 07EB                        l858 07BE                        l796 069C  
                      l798 06A3                        u100 07D2                        u101 07D1  
                      u117 0752                        u207 0700                        u127 0780  
                      u217 0668                        u137 0794                        u147 07B7  
                      u157 07F1                        u167 0685                        u177 068D  
                      u187 06E4                        u197 06F3                        fsr0 0004  
                     STR_1 002F                       STR_2 0009                       STR_3 0016  
                     STR_4 0023          ?_Lcd_Write_String 0070                       _main 0721  
                     btemp 007E                       start 0000         ??_Lcd_Write_String 0075  
          __end_of_Lcd_Cmd 0671                      ?_main 0070                      _ANSEL 0188  
                    _PORTA 0005                      _PORTC 0007    __size_of_Lcd_Set_Cursor 0024  
                    _TRISC 0087                      _TRISD 0088    __size_of_Lcd_Shift_Left 000D  
                    _setup 0624                      main@a 007B                      pclath 000A  
                    status 0003                      wtemp0 007E           __end_of_Lcd_Init 0721  
         __end_of_Lcd_Port 0624            __initialization 07FC               __end_of_main 07FC  
                   ??_main 0078         __size_of_Lcd_Clear 000D                     ?_setup 0070  
                   _ANSELH 0189                  ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0020  
 __size_of_Lcd_Shift_Right 000D            Lcd_Set_Cursor@a 0076            Lcd_Set_Cursor@b 0074  
  __end_of__initialization 07FC          __end_of_Lcd_Clear 063D             __pcstackCOMMON 0070  
            __end_of_setup 0630             _Lcd_Set_Cursor 0691             _Lcd_Shift_Left 063D  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                    ??_setup 0070  
               __pmaintext 0721  __size_of_Lcd_Write_String 0025     __end_of_Lcd_Set_Cursor 06B5  
   __end_of_Lcd_Shift_Left 064A          ??_Lcd_Shift_Right 0074                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0003             _Lcd_Write_Char 0671  
                  _Lcd_Cmd 0657            ?_Lcd_Set_Cursor 0074                    __ptext1 0624  
                  __ptext2 06B5                    __ptext3 0671                    __ptext4 064A  
                  __ptext5 063D                    __ptext6 0691                    __ptext7 06DA  
                  __ptext8 0630                    __ptext9 0657            ?_Lcd_Shift_Left 0070  
   __end_of_Lcd_Write_Char 0691       end_of_initialization 07FC                  Lcd_Port@a 0070  
                _PORTDbits 0008            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077  
        Lcd_Write_String@i 0075                  _Lcd_Clear 0630           _Lcd_Write_String 06B5  
      start_initialization 07FC          __size_of_Lcd_Init 0047          __size_of_Lcd_Port 0006  
               ?_Lcd_Clear 0070            _Lcd_Shift_Right 064A            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073                  ___latbits 0002                   ?_Lcd_Cmd 0070  
         ??_Lcd_Set_Cursor 0075           ??_Lcd_Shift_Left 0074                  __pstrings 0003  
           __size_of_setup 000C    __end_of_Lcd_Shift_Right 0657                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074                __stringbase 0008           ??_Lcd_Write_Char 0071  
                 _Lcd_Init 06DA                   _Lcd_Port 061E   __end_of_Lcd_Write_String 06DA  
         __size_of_Lcd_Cmd 001A         __end_of__stringtab 0009                   __ptext10 061E  
            __size_of_main 00DB           ?_Lcd_Shift_Right 0070                  stringcode 0003  
       Lcd_Set_Cursor@temp 0077                   stringdir 0003                   stringtab 0003  
